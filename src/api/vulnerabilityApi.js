// =======================================================================
// FILE: src/api/vulnerabilityApi.js (NEW FILE)
// PURPOSE: Centralizes API calls for vulnerabilities.
// =======================================================================
const API_URL = import.meta.env.VITE_API_BASE_URL;

// --- Predefined Vulnerability Database Functions ---
export const getVulnerabilityDatabase = async () => {
    const response = await fetch(`${API_URL}/vulnerabilities`, { credentials: 'include' });
    if (!response.ok) throw new Error('Failed to fetch vulnerability database.');
    return response.json();
};

export const createVulnerability = async (vulnData) => {
    const response = await fetch(`${API_URL}/vulnerabilities`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(vulnData),
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to create vulnerability.');
    return data;
};

export const updateVulnerability = async (id, vulnData) => {
    const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(vulnData),
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to update vulnerability.');
    return data;
};

export const deleteVulnerability = async (id) => {
    const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
        method: 'DELETE',
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to delete vulnerability.');
    return data;
};

export const getVulnerabilityTypes = async () => {
  const response = await fetch(`${API_URL}/vulnerabilities/types`, { credentials: 'include' });
  if (!response.ok) throw new Error('Failed to fetch vulnerability types.');
  return response.json();
};

export const getVulnerabilityByType = async (type) => {
  const response = await fetch(`${API_URL}/vulnerabilities/type/${encodeURIComponent(type)}`, { credentials: 'include' });
  if (!response.ok) throw new Error('Failed to fetch vulnerabilities by type.');
  return response.json();
};

