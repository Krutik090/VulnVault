// =======================================================================
// FILE: src/api/vulnerabilityApi.js (NEW FILE)
// PURPOSE: Centralizes API calls for vulnerabilities.
// =======================================================================
const API_URL = import.meta.env.VITE_API_BASE_URL;

// --- Predefined Vulnerability Database Functions ---
export const getVulnerabilityDatabase = async () => {
    const response = await fetch(`${API_URL}/vulnerabilities`, { credentials: 'include' });
    if (!response.ok) throw new Error('Failed to fetch vulnerability database.');
    return response.json();
};

export const createVulnerability = async (vulnData) => {
    const response = await fetch(`${API_URL}/vulnerabilities`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(vulnData),
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to create vulnerability.');
    return data;
};

export const updateVulnerability = async (id, vulnData) => {
    const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(vulnData),
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to update vulnerability.');
    return data;
};

export const deleteVulnerability = async (id) => {
    const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
        method: 'DELETE',
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to delete vulnerability.');
    return data;
};



/**
 * Adds a new vulnerability instance to a project.
 * @param {string} projectId - The ID of the project.
 * @param {FormData} formData - The form data, including file uploads.
 */
export const addProjectVulnerability = async (projectId, formData) => {
    // When sending FormData, we don't set the Content-Type header.
    // The browser will set it automatically with the correct boundary.
    const response = await fetch(`${API_URL}/project-vulnerabilities/${projectId}`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to add vulnerability.');
    return data;
};

/**
 * Fetches all instances of a specific vulnerability for a given project.
 * @param {string} projectName - The name of the project.
 * @param {string} vulnName - The name of the vulnerability.
 */
export const getVulnerabilityInstances = async (projectName, vulnName) => {
    const params = new URLSearchParams({ projectName, vulnName });
    const response = await fetch(`${API_URL}/project-vulnerabilities/instances?${params}`, {
        credentials: 'include',
    });
    if (!response.ok) throw new Error('Failed to fetch vulnerability instances.');
    return response.json();
};

/**
 * Fetches the full details of a single vulnerability instance.
 * @param {string} vulnId - The ID of the vulnerability instance.
 */
export const getVulnerabilityInstance = async (vulnId) => {
    const response = await fetch(`${API_URL}/project-vulnerabilities/${vulnId}`, {
        credentials: 'include',
    });
    if (!response.ok) throw new Error('Failed to fetch vulnerability details.');
    return response.json();
};

/**
 * Updates a specific vulnerability instance.
 * @param {string} vulnId - The ID of the instance to update.
 * @param {object} data - The updated data.
 */
export const updateVulnerabilityInstance = async (vulnId, data) => {
    const response = await fetch(`${API_URL}/project-vulnerabilities/${vulnId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        credentials: 'include',
    });
    const result = await response.json();
    if (!response.ok) throw new Error(result.message || 'Failed to update vulnerability.');
    return result;
};


/**
 * Adds new images to an existing vulnerability instance.
 * @param {string} vulnId - The ID of the vulnerability instance.
 * @param {FormData} formData - The form data containing the new files.
 */
export const addUploads = async (vulnId, formData) => {
    const response = await fetch(`${API_URL}/project-vulnerabilities/${vulnId}/uploads`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
    });
    const result = await response.json();
    if (!response.ok) throw new Error(result.message || 'Failed to upload images.');
    return result;
};

/**
 * Deletes a specific image from a vulnerability instance.
 * @param {string} vulnId - The ID of the vulnerability instance.
 * @param {string} uploadId - The ID of the image to delete.
 */
export const deleteUpload = async (vulnId, uploadId) => {
    const response = await fetch(`${API_URL}/project-vulnerabilities/${vulnId}/uploads/${uploadId}`, {
        method: 'DELETE',
        credentials: 'include',
    });
    const result = await response.json();
    if (!response.ok) throw new Error(result.message || 'Failed to delete image.');
    return result;
};

