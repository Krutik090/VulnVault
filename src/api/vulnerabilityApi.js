// =======================================================================
// FILE: src/api/vulnerabilityApi.js (UPDATED & ALIGNED)
// PURPOSE: API calls for vulnerability database
// =======================================================================

const API_URL = import.meta.env.VITE_API_BASE_URL;

// Get all vulnerabilities from database
export const getVulnerabilityDatabase = async () => {
  const response = await fetch(`${API_URL}/vulnerabilities`, { 
    credentials: 'include' 
  });
  if (!response.ok) throw new Error('Failed to fetch vulnerability database.');
  return response.json();
};

// Get single vulnerability by ID
export const getVulnerabilityById = async (id) => {
  const response = await fetch(`${API_URL}/vulnerabilities/${id}`, { 
    credentials: 'include' 
  });
  if (!response.ok) throw new Error('Failed to fetch vulnerability.');
  return response.json();
};

// Create new vulnerability
export const createVulnerability = async (vulnData) => {
  const response = await fetch(`${API_URL}/vulnerabilities`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(vulnData),
    credentials: 'include',
  });
  const data = await response.json();
  if (!response.ok) throw new Error(data.message || 'Failed to create vulnerability.');
  return data;
};

// Update vulnerability
export const updateVulnerability = async (id, vulnData) => {
  const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(vulnData),
    credentials: 'include',
  });
  const data = await response.json();
  if (!response.ok) throw new Error(data.message || 'Failed to update vulnerability.');
  return data;
};

// Delete vulnerability
export const deleteVulnerability = async (id) => {
  const response = await fetch(`${API_URL}/vulnerabilities/${id}`, {
    method: 'DELETE',
    credentials: 'include',
  });
  const data = await response.json();
  if (!response.ok) throw new Error(data.message || 'Failed to delete vulnerability.');
  return data;
};

// Get vulnerability types
export const getVulnerabilityTypes = async () => {
  const response = await fetch(`${API_URL}/vulnerabilities/types`, { 
    credentials: 'include' 
  });
  if (!response.ok) throw new Error('Failed to fetch vulnerability types.');
  return response.json();
};

// Get vulnerabilities by type
export const getVulnerabilityByType = async (type) => {
  const response = await fetch(`${API_URL}/vulnerabilities/type/${encodeURIComponent(type)}`, { 
    credentials: 'include' 
  });
  if (!response.ok) throw new Error('Failed to fetch vulnerabilities by type.');
  return response.json();
};

// Get vulnerability names only
export const getVulnerabilityNames = async () => {
  const response = await fetch(`${API_URL}/vulnerabilities/names`, { 
    credentials: 'include' 
  });
  if (!response.ok) throw new Error('Failed to fetch vulnerability names.');
  return response.json();
};
