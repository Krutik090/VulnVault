// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityDatabasePage.jsx (UPDATED)
// PURPOSE: Central library of predefined vulnerabilities with theme support.
// =======================================================================
import { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';
import DataTable from '../../components/DataTable';
import SearchableDropdown from '../../components/SearchableDropdown';
import AddEditVulnModal from './AddEditVulnModal';
import DeleteVulnModal from './DeleteVulnModal';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

// Icons
const DatabaseIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4" />
  </svg>
);

const PlusIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
  </svg>
);

const EditIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const EyeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const BugIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const FilterIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const VulnerabilityDatabasePage = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [vulnToEdit, setVulnToEdit] = useState(null);
  const [vulnToDelete, setVulnToDelete] = useState(null);

  // Filter states
  const [selectedType, setSelectedType] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('');

  const { theme, color } = useTheme();
  const { user } = useAuth();

  const fetchData = async () => {
    setIsLoading(true);
    try {
      const response = await getVulnerabilityDatabase();
      setVulnerabilities(response.data || []);
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      toast.error("Could not fetch vulnerability database.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSave = () => {
    setIsModalOpen(false);
    setVulnToEdit(null);
    fetchData();
  };

  const handleAddVulnerability = () => {
    setVulnToEdit(null);
    setIsModalOpen(true);
  };

  const handleEditVulnerability = (vuln) => {
    setVulnToEdit(vuln);
    setIsModalOpen(true);
  };

  // Get unique types and severities for filtering
  const { typeOptions, severityOptions } = useMemo(() => {
    const types = [...new Set(vulnerabilities.map(v => v.vulnType).filter(Boolean))];
    const severities = [...new Set(vulnerabilities.map(v => v.severity).filter(Boolean))];

    return {
      typeOptions: types.map(type => ({ value: type, label: type })),
      severityOptions: severities.map(severity => ({ value: severity, label: severity }))
    };
  }, [vulnerabilities]);

  // Filter vulnerabilities based on selected filters
  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      const typeMatch = !selectedType || vuln.vulnType === selectedType;
      const severityMatch = !selectedSeverity || vuln.severity === selectedSeverity;
      return typeMatch && severityMatch;
    });
  }, [vulnerabilities, selectedType, selectedSeverity]);

  // Statistics
  const statistics = useMemo(() => {
    const total = vulnerabilities.length;
    const severityCounts = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
      return acc;
    }, {});

    return {
      total,
      critical: severityCounts['Critical'] || 0,
      high: severityCounts['High'] || 0,
      medium: severityCounts['Medium'] || 0,
      low: severityCounts['Low'] || 0,
      informational: severityCounts['Informational'] || 0
    };
  }, [vulnerabilities]);

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Informational': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  const columns = useMemo(() => [
    {
      accessorKey: 'vulnName',
      header: 'Vulnerability Name',
      cell: ({ getValue, row }) => (
        <div className="flex items-center gap-2">
          <BugIcon className="text-primary flex-shrink-0" />
          <span className="font-medium text-card-foreground">
            {getValue() || 'Unnamed Vulnerability'}
          </span>
        </div>
      )
    },
    {
      accessorKey: 'vulnType',
      header: 'Type',
      cell: ({ getValue }) => (
        <span className="px-2 py-1 bg-muted text-muted-foreground rounded-md text-sm">
          {getValue() || 'Unknown'}
        </span>
      )
    },
    {
      accessorKey: 'severity',
      header: 'Severity',
      cell: ({ getValue }) => {
        const severity = getValue();
        if (!severity) return <span className="text-muted-foreground">Unknown</span>;

        return (
          <div className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-medium border ${getSeverityColor(severity)}`}>
            <AlertTriangleIcon className="w-3 h-3 mr-1" />
            {severity}
          </div>
        );
      }
    },
    {
      accessorKey: 'cvssScore',
      header: 'CVSS Score',
      cell: ({ getValue }) => {
        const score = getValue();
        if (!score) return <span className="text-muted-foreground">N/A</span>;

        const scoreColor = score >= 9 ? 'text-red-600' :
          score >= 7 ? 'text-orange-600' :
            score >= 4 ? 'text-yellow-600' : 'text-green-600';

        return (
          <span className={`font-mono font-semibold ${scoreColor}`}>
            {parseFloat(score).toFixed(1)}
          </span>
        );
      }
    },
    {
      accessorKey: 'cweId',
      header: 'CWE ID',
      cell: ({ getValue }) => {
        const cweId = getValue();
        if (!cweId) return <span className="text-muted-foreground">N/A</span>;

        return (
          <span className="font-mono text-sm text-card-foreground bg-muted px-2 py-1 rounded">
            {cweId}
          </span>
        );
      }
    },
    {
      id: 'actions',
      header: 'Actions',
      cell: ({ row }) => (
        <div className="flex items-center gap-1">
          {/* <Link
            to={`/vulnerabilities/${encodeURIComponent(row.original.vulnName)}`}
            className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
            title="View Details"
          >
            <EyeIcon />
          </Link> */}
          {user?.role === 'admin' && (
            <>
              <button
                onClick={() => handleEditVulnerability(row.original)}
                className="p-2 rounded-lg text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 transition-colors"
                title="Edit Vulnerability"
              >
                <EditIcon />
              </button>
              <button
                onClick={() => setVulnToDelete(row.original)}
                className="p-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                title="Delete Vulnerability"
              >
                <TrashIcon />
              </button>
            </>
          )}
        </div>
      )
    },
  ], [user?.role]);

  return (
    <div className={`${theme} theme-${color} space-y-6`}>
      {/* Header */}
      <div className="mb-8">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-primary/10 rounded-xl">
              <DatabaseIcon className="text-primary" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-card-foreground">
                Vulnerability Database
              </h1>
              <p className="text-muted-foreground mt-1">
                Manage the central library of predefined vulnerabilities
              </p>
            </div>
          </div>

          {user?.role === 'admin' && (
            <button
              onClick={handleAddVulnerability}
              className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium"
            >
              <PlusIcon />
              Add Vulnerability
            </button>
          )}
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-2 md:grid-cols-6 gap-4 mb-8">
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">Total</p>
            <p className="text-xl font-bold text-card-foreground">{statistics.total}</p>
          </div>
        </div>
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">Critical</p>
            <p className="text-xl font-bold text-red-600">{statistics.critical}</p>
          </div>
        </div>
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">High</p>
            <p className="text-xl font-bold text-orange-600">{statistics.high}</p>
          </div>
        </div>
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">Medium</p>
            <p className="text-xl font-bold text-yellow-600">{statistics.medium}</p>
          </div>
        </div>
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">Low</p>
            <p className="text-xl font-bold text-green-600">{statistics.low}</p>
          </div>
        </div>
        <div className="bg-card rounded-xl border border-border p-4">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">Info</p>
            <p className="text-xl font-bold text-blue-600">{statistics.informational}</p>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="mb-6">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="w-full sm:w-64">
            <SearchableDropdown
              label="Filter by Type"
              options={typeOptions}
              value={selectedType}
              onChange={setSelectedType}
              placeholder="All types"
              noOptionsMessage="No types found"
            />
          </div>
          <div className="w-full sm:w-64">
            <SearchableDropdown
              label="Filter by Severity"
              options={severityOptions}
              value={selectedSeverity}
              onChange={setSelectedSeverity}
              placeholder="All severities"
              noOptionsMessage="No severities found"
            />
          </div>
          {(selectedType || selectedSeverity) && (
            <div className="flex items-end">
              <button
                onClick={() => {
                  setSelectedType('');
                  setSelectedSeverity('');
                }}
                className="px-4 py-2 text-sm text-muted-foreground hover:text-foreground border border-input rounded-lg hover:bg-accent transition-colors flex items-center gap-2"
              >
                <FilterIcon />
                Clear Filters
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Vulnerabilities Table */}
      <div className="bg-card rounded-xl shadow-sm border border-border overflow-hidden">
        {isLoading ? (
          <div className="p-8">
            <Spinner message="Loading vulnerability database..." />
          </div>
        ) : filteredVulnerabilities.length === 0 ? (
          <div className="p-12 text-center">
            <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
              <DatabaseIcon className="w-8 h-8 text-muted-foreground" />
            </div>
            <h3 className="text-lg font-semibold text-card-foreground mb-2">
              {vulnerabilities.length === 0 ? 'No Vulnerabilities Found' : 'No Results Found'}
            </h3>
            <p className="text-muted-foreground mb-6">
              {vulnerabilities.length === 0
                ? 'The vulnerability database is empty. Add the first vulnerability to get started.'
                : 'No vulnerabilities match your current filter criteria. Try adjusting your filters.'
              }
            </p>
            {user?.role === 'admin' && vulnerabilities.length === 0 && (
              <button
                onClick={handleAddVulnerability}
                className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium"
              >
                <PlusIcon />
                Add First Vulnerability
              </button>
            )}
          </div>
        ) : (
          <DataTable
            data={filteredVulnerabilities}
            columns={columns}
            title={`Vulnerability Database${(selectedType || selectedSeverity) ? ' (Filtered)' : ''}`}
          />
        )}
      </div>

      {/* Filter Results Summary */}
      {(selectedType || selectedSeverity) && filteredVulnerabilities.length > 0 && (
        <div className="mt-4 text-center">
          <p className="text-sm text-muted-foreground">
            Showing {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
            {selectedType && ` • Type: ${selectedType}`}
            {selectedSeverity && ` • Severity: ${selectedSeverity}`}
          </p>
        </div>
      )}

      {/* Modals */ }
  {
    user?.role === 'admin' && (
      <>
        <AddEditVulnModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSave={handleSave}
          vulnToEdit={vulnToEdit}
        />
        <DeleteVulnModal
          vuln={vulnToDelete}
          onClose={() => setVulnToDelete(null)}
          onDeleted={fetchData}
        />
      </>
    )
  }
    </div >
  );
};

export default VulnerabilityDatabasePage;
