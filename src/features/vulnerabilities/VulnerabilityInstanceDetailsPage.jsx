// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstanceDetailsPage.jsx (UPDATED)
// =======================================================================
import { useState, useEffect, memo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getVulnerabilityInstance, updateVulnerabilityInstance, addUploads, deleteUpload } from '../../api/vulnerabilityApi';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';
import RichTextEditor from '../../components/RichTextEditor';
import ImageViewerModal from '../../components/ImageViewerModal'; // Import the new component

const DetailRow = memo(({ label, children }) => (
    <tr className="border-b last:border-b-0">
        <td className="py-3 px-4 w-1/4 font-semibold text-gray-600 bg-gray-50 align-top">{label}</td>
        <td className="py-3 px-4">{children}</td>
    </tr>
));

const VulnerabilityInstanceDetailsPage = () => {
    const { vulnId } = useParams();
    const navigate = useNavigate();
    const [vulnDetails, setVulnDetails] = useState(null);
    const [editedDetails, setEditedDetails] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditing, setIsEditing] = useState(false);
    const [newFiles, setNewFiles] = useState([]);
    const [selectedImage, setSelectedImage] = useState(null); // State for the image viewer

    const fetchData = async () => {
        setIsLoading(true);
        try {
            const response = await getVulnerabilityInstance(vulnId);
            setVulnDetails(response.data);
            setEditedDetails(response.data);
        } catch (error) {
            toast.error(error.message);
            setVulnDetails(null);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, [vulnId]);

    const handleSaveChanges = async () => {
        setIsLoading(true);
        try {
            const updatePromise = updateVulnerabilityInstance(vulnId, editedDetails);
            
            let uploadPromise = Promise.resolve();
            if (newFiles.length > 0) {
                const formData = new FormData();
                newFiles.forEach(file => formData.append('uploads', file));
                uploadPromise = addUploads(vulnId, formData);
            }

            await Promise.all([updatePromise, uploadPromise]);
            
            toast.success("Vulnerability updated successfully!");
            setIsEditing(false);
            setNewFiles([]);
            await fetchData();
        } catch (error) {
            toast.error(error.message);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDeleteImage = async (uploadId) => {
        if (!window.confirm("Are you sure you want to delete this image?")) return;
        
        try {
            await deleteUpload(vulnId, uploadId);
            toast.success("Image deleted.");
            const updatedUploads = vulnDetails.uploads.filter(u => u._id !== uploadId);
            setVulnDetails(prev => ({ ...prev, uploads: updatedUploads }));
            setEditedDetails(prev => ({ ...prev, uploads: updatedUploads }));
        } catch (error) {
            toast.error(error.message);
        }
    };
    
    const handleCancelEditing = () => {
        setEditedDetails(vulnDetails);
        setIsEditing(false);
    };

    const handleFieldChange = (field, value) => {
        setEditedDetails(prev => ({ ...prev, [field]: value }));
    };

    if (isLoading) return <Spinner fullPage />;
    if (!vulnDetails) return <div className="p-8 text-center">Vulnerability not found.</div>;

    const serverUrl = import.meta.env.VITE_SERVER_URL;

    return (
        <>
            <div className="bg-white shadow rounded-lg">
                <div className="p-6 border-b flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <div className="flex items-center">
                        <button onClick={() => navigate(-1)} className="p-2 mr-4 rounded-full hover:bg-gray-200" title="Go Back">
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                        </button>
                        <h1 className="text-2xl font-bold text-gray-800">{vulnDetails.vulnName}</h1>
                    </div>
                    <div>
                        {isEditing ? (
                            <>
                                <button onClick={handleSaveChanges} className="px-4 py-2 bg-green-600 text-white rounded-md mr-2">Save</button>
                                <button onClick={handleCancelEditing} className="px-4 py-2 bg-gray-600 text-white rounded-md">Cancel</button>
                            </>
                        ) : (
                            <button onClick={() => setIsEditing(true)} className="px-4 py-2 bg-blue-600 text-white rounded-md">Edit</button>
                        )}
                    </div>
                </div>
                <div className="p-6">
                    <table className="w-full text-sm border rounded-lg">
                        <tbody>
                            <DetailRow label="Status">{isEditing ? <select value={editedDetails.review || ''} onChange={e => handleFieldChange('review', e.target.value)} className="w-full p-1 border rounded"><option>open</option><option>close</option><option>not_in_scope</option><option>obsolete</option><option>unable_to_verify</option></select> : vulnDetails.review}</DetailRow>
                            <DetailRow label="Severity">{isEditing ? <select value={editedDetails.severity || ''} onChange={e => handleFieldChange('severity', e.target.value)} className="w-full p-1 border rounded"><option>Critical</option><option>High</option><option>Medium</option><option>Low</option><option>Info</option></select> : vulnDetails.severity}</DetailRow>
                            <DetailRow label="Tester Name">{vulnDetails.user_name}</DetailRow>
                            <DetailRow label="Vulnerability Name">{isEditing ? <input value={editedDetails.vulnName || ''} onChange={e => handleFieldChange('vulnName', e.target.value)} className="w-full p-1 border rounded" /> : vulnDetails.vulnName}</DetailRow>
                            <DetailRow label="CWE">{isEditing ? <input value={editedDetails.cwe || ''} onChange={e => handleFieldChange('cwe', e.target.value)} className="w-full p-1 border rounded" /> : vulnDetails.cwe}</DetailRow>
                            <DetailRow label="OWASP Family">{isEditing ? <input value={editedDetails.owaspFamily || ''} onChange={e => handleFieldChange('owaspFamily', e.target.value)} className="w-full p-1 border rounded" /> : vulnDetails.owaspFamily}</DetailRow>
                            <DetailRow label="Description">{isEditing ? <RichTextEditor value={editedDetails.description || ''} onChange={data => handleFieldChange('description', data)} /> : <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: vulnDetails.description }} />}</DetailRow>
                            <DetailRow label="Impact">{isEditing ? <RichTextEditor value={editedDetails.impact || ''} onChange={data => handleFieldChange('impact', data)} /> : <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: vulnDetails.impact }} />}</DetailRow>
                            <DetailRow label="Recommendation">{isEditing ? <RichTextEditor value={editedDetails.recommendation || ''} onChange={data => handleFieldChange('recommendation', data)} /> : <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: vulnDetails.recommendation }} />}</DetailRow>
                            <DetailRow label="Affected URL">{isEditing ? <input value={editedDetails.affectedUrl || ''} onChange={e => handleFieldChange('affectedUrl', e.target.value)} className="w-full p-1 border rounded" /> : vulnDetails.affectedUrl}</DetailRow>
                            <DetailRow label="Affected Parameter">{isEditing ? <input value={editedDetails.affectedParameter || ''} onChange={e => handleFieldChange('affectedParameter', e.target.value)} className="w-full p-1 border rounded" /> : vulnDetails.affectedParameter}</DetailRow>
                            <DetailRow label="Attack Value">{isEditing ? <textarea value={editedDetails.attackValue || ''} onChange={e => handleFieldChange('attackValue', e.target.value)} className="w-full p-1 border rounded" rows="3" /> : <pre className="whitespace-pre-wrap font-mono bg-gray-100 p-2 rounded">{vulnDetails.attackValue}</pre>}</DetailRow>
                        </tbody>
                    </table>
                     {(vulnDetails.uploads?.length > 0 || isEditing) && (
                        <div className="mt-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Proof of Concept</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                {vulnDetails.uploads.map((upload) => {
                                    const imageUrl = `${serverUrl}/${upload.filePath.replace(/\\/g, '/')}`;
                                    return (
                                        <div key={upload._id} className="relative border rounded-lg overflow-hidden group">
                                            <img 
                                                src={imageUrl} 
                                                alt={upload.caption || 'Vulnerability Evidence'} 
                                                className="w-full h-48 object-cover cursor-pointer"
                                                onClick={() => setSelectedImage(imageUrl)}
                                            />
                                            <div className="p-2 bg-gray-50 text-sm text-gray-700 truncate">{upload.caption}</div>
                                            {isEditing && (
                                                <button onClick={() => handleDeleteImage(upload._id)} className="absolute top-2 right-2 bg-red-600 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity">
                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                                </button>
                                            )}
                                        </div>
                                    );
                                })}
                            </div>
                            {isEditing && (
                                <div className="mt-4">
                                    <label className="block text-sm font-bold text-gray-700 mb-1">Add More Images</label>
                                    <input type="file" multiple onChange={(e) => setNewFiles(Array.from(e.target.files))} className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-pink-50 file:text-pink-700 hover:file:bg-pink-100"/>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
            <ImageViewerModal imageUrl={selectedImage} onClose={() => setSelectedImage(null)} />
        </>
    );
};

export default VulnerabilityInstanceDetailsPage;
