// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstanceDetailsPage.jsx (UPDATED)
// PURPOSE: Detailed view and editing of vulnerability instances with theme support.
// =======================================================================
import { useState, useEffect, memo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getVulnerabilityInstance, updateVulnerabilityInstance, addUploads, deleteUpload } from '../../api/vulnerabilityApi';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';
import RichTextEditor from '../../components/RichTextEditor';
import ImageViewerModal from '../../components/ImageViewerModal';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

// Icons
const ArrowLeftIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const EditIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
  </svg>
);

const BugIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const UploadIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const ImageIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const FileIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
);

const DetailRow = memo(({ label, children }) => (
  <div className="space-y-2">
    <label className="block text-sm font-medium text-card-foreground">{label}</label>
    <div className="text-card-foreground">{children}</div>
  </div>
));

const VulnerabilityInstanceDetailsPage = () => {
  const { vulnId } = useParams();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [editData, setEditData] = useState({});
  const [uploads, setUploads] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  const [viewingImage, setViewingImage] = useState(null);
  const { theme, color } = useTheme();
  const { user } = useAuth();

  const fetchData = async () => {
    if (!vulnId) return;
    
    setIsLoading(true);
    try {
      const response = await getVulnerabilityInstance(vulnId);
      if (response.success && response.data) {
        setVulnerability(response.data);
        setUploads(response.data.uploads || []);
        setEditData({
          description: response.data.description || '',
          impact: response.data.impact || '',
          remediation: response.data.remediation || '',
          references: response.data.references || '',
          severity: response.data.severity || 'Medium',
          cvssScore: response.data.cvssScore || '',
          cweId: response.data.cweId || ''
        });
      }
    } catch (error) {
      console.error('Error fetching vulnerability:', error);
      toast.error('Could not load vulnerability details.');
      navigate(-1);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [vulnId]);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      const response = await updateVulnerabilityInstance(vulnId, editData);
      if (response.success) {
        setVulnerability(prev => ({ ...prev, ...editData }));
        setIsEditing(false);
        toast.success('Vulnerability updated successfully!');
      }
    } catch (error) {
      console.error('Error updating vulnerability:', error);
      toast.error(error.message || 'Failed to update vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    if (vulnerability) {
      setEditData({
        description: vulnerability.description || '',
        impact: vulnerability.impact || '',
        remediation: vulnerability.remediation || '',
        references: vulnerability.references || '',
        severity: vulnerability.severity || 'Medium',
        cvssScore: vulnerability.cvssScore || '',
        cweId: vulnerability.cweId || ''
      });
    }
    setIsEditing(false);
  };

  const handleFileUpload = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;

    setIsUploading(true);
    try {
      const formData = new FormData();
      files.forEach(file => formData.append('files', file));

      const response = await addUploads(vulnId, formData);
      if (response.success) {
        setUploads(prev => [...prev, ...response.data]);
        toast.success(`${files.length} file(s) uploaded successfully!`);
      }
    } catch (error) {
      console.error('Error uploading files:', error);
      toast.error(error.message || 'Failed to upload files');
    } finally {
      setIsUploading(false);
      e.target.value = '';
    }
  };

  const handleDeleteUpload = async (uploadId) => {
    try {
      const response = await deleteUpload(vulnId, uploadId);
      if (response.success) {
        setUploads(prev => prev.filter(upload => upload._id !== uploadId));
        toast.success('File deleted successfully!');
      }
    } catch (error) {
      console.error('Error deleting upload:', error);
      toast.error(error.message || 'Failed to delete file');
    }
  };

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Informational': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  // FIXED: Add null/undefined check for filename
  const isImage = (filename) => {
    // Add null/undefined check before calling toLowerCase
    if (!filename || typeof filename !== 'string') {
      return false;
    }
    
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  if (isLoading) {
    return (
      <div className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}>
        <Spinner message="Loading vulnerability details..." />
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}>
        <div className="text-center">
          <h2 className="text-xl font-semibold text-card-foreground mb-2">Vulnerability Not Found</h2>
          <p className="text-muted-foreground mb-4">The requested vulnerability could not be found.</p>
          <button
            onClick={() => navigate(-1)}
            className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
          >
            <ArrowLeftIcon />
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`${theme} theme-${color} min-h-screen bg-background`}>
      <div className="max-w-6xl mx-auto py-8 px-4">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate(-1)}
            className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-6"
          >
            <ArrowLeftIcon />
            <span className="text-sm">Back</span>
          </button>
          
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-xl">
                <BugIcon className="text-primary" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-card-foreground">
                  {vulnerability.vulnName || 'Vulnerability Details'}
                </h1>
                <p className="text-muted-foreground mt-1">
                  {vulnerability.projectName && `Project: ${vulnerability.projectName}`}
                </p>
              </div>
            </div>

            {user?.role === 'admin' && (
              <div className="flex gap-3">
                {isEditing ? (
                  <>
                    <button
                      onClick={handleCancel}
                      disabled={isSaving}
                      className="px-4 py-2 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleSave}
                      disabled={isSaving}
                      className="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isSaving ? (
                        <>
                          <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                          Saving...
                        </>
                      ) : (
                        <>
                          <SaveIcon />
                          Save Changes
                        </>
                      )}
                    </button>
                  </>
                ) : (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="inline-flex items-center gap-2 px-4 py-2 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/80 transition-colors font-medium"
                  >
                    <EditIcon />
                    Edit Vulnerability
                  </button>
                )}
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2 space-y-8">
            {/* Basic Information */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h2 className="text-xl font-semibold text-card-foreground mb-6">Basic Information</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <DetailRow label="Vulnerability Type">
                  <span className="px-3 py-1 bg-muted text-muted-foreground rounded-md text-sm">
                    {vulnerability.vulnType || 'Not specified'}
                  </span>
                </DetailRow>

                <DetailRow label="Severity Level">
                  <div className={`inline-flex items-center px-3 py-1 rounded-md text-sm font-medium border ${getSeverityColor(vulnerability.severity)}`}>
                    <AlertTriangleIcon className="w-3 h-3 mr-1" />
                    {vulnerability.severity || 'Not specified'}
                  </div>
                </DetailRow>

                <DetailRow label="CVSS Score">
                  {isEditing ? (
                    <input
                      type="number"
                      min="0"
                      max="10"
                      step="0.1"
                      value={editData.cvssScore}
                      onChange={(e) => setEditData(prev => ({ ...prev, cvssScore: e.target.value }))}
                      className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                      placeholder="0.0 - 10.0"
                    />
                  ) : (
                    <span className="font-mono text-sm">
                      {vulnerability.cvssScore ? parseFloat(vulnerability.cvssScore).toFixed(1) : 'Not specified'}
                    </span>
                  )}
                </DetailRow>

                <DetailRow label="CWE ID">
                  {isEditing ? (
                    <input
                      type="text"
                      value={editData.cweId}
                      onChange={(e) => setEditData(prev => ({ ...prev, cweId: e.target.value }))}
                      className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                      placeholder="e.g., CWE-89"
                    />
                  ) : (
                    <span className="font-mono text-sm">
                      {vulnerability.cweId || 'Not specified'}
                    </span>
                  )}
                </DetailRow>
              </div>
            </div>

            {/* Description */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">Description</h3>
              {isEditing ? (
                <RichTextEditor
                  value={editData.description}
                  onChange={(value) => setEditData(prev => ({ ...prev, description: value }))}
                  placeholder="Describe the vulnerability in detail..."
                  height={200}
                />
              ) : (
                <div 
                  className="prose prose-sm max-w-none dark:prose-invert"
                  dangerouslySetInnerHTML={{ __html: vulnerability.description || '<p class="text-muted-foreground">No description provided.</p>' }}
                />
              )}
            </div>

            {/* Impact */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">Impact</h3>
              {isEditing ? (
                <RichTextEditor
                  value={editData.impact}
                  onChange={(value) => setEditData(prev => ({ ...prev, impact: value }))}
                  placeholder="Describe the potential impact..."
                  height={200}
                />
              ) : (
                <div 
                  className="prose prose-sm max-w-none dark:prose-invert"
                  dangerouslySetInnerHTML={{ __html: vulnerability.impact || '<p class="text-muted-foreground">No impact information provided.</p>' }}
                />
              )}
            </div>

            {/* Remediation */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">Remediation</h3>
              {isEditing ? (
                <RichTextEditor
                  value={editData.remediation}
                  onChange={(value) => setEditData(prev => ({ ...prev, remediation: value }))}
                  placeholder="Provide remediation steps..."
                  height={200}
                />
              ) : (
                <div 
                  className="prose prose-sm max-w-none dark:prose-invert"
                  dangerouslySetInnerHTML={{ __html: vulnerability.remediation || '<p class="text-muted-foreground">No remediation steps provided.</p>' }}
                />
              )}
            </div>

            {/* References */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">References</h3>
              {isEditing ? (
                <RichTextEditor
                  value={editData.references}
                  onChange={(value) => setEditData(prev => ({ ...prev, references: value }))}
                  placeholder="Add relevant references, links, or citations..."
                  height={150}
                />
              ) : (
                <div 
                  className="prose prose-sm max-w-none dark:prose-invert"
                  dangerouslySetInnerHTML={{ __html: vulnerability.references || '<p class="text-muted-foreground">No references provided.</p>' }}
                />
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Info */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">Quick Info</h3>
              <div className="space-y-4">
                {vulnerability.createdAt && (
                  <div>
                    <p className="text-sm text-muted-foreground">Created</p>
                    <p className="text-sm text-card-foreground">
                      {new Date(vulnerability.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                )}
                
                {vulnerability.updatedAt && (
                  <div>
                    <p className="text-sm text-muted-foreground">Last Updated</p>
                    <p className="text-sm text-card-foreground">
                      {new Date(vulnerability.updatedAt).toLocaleDateString()}
                    </p>
                  </div>
                )}

                {vulnerability.status && (
                  <div>
                    <p className="text-sm text-muted-foreground">Status</p>
                    <span className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-medium ${
                      vulnerability.status === 'Fixed' ? 'bg-green-100 text-green-800' :
                      vulnerability.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {vulnerability.status}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {/* Attachments */}
            <div className="bg-card rounded-xl border border-border p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-card-foreground">Attachments</h3>
                <label className="cursor-pointer">
                  <input
                    type="file"
                    multiple
                    onChange={handleFileUpload}
                    className="hidden"
                    disabled={isUploading}
                  />
                  <div className="inline-flex items-center gap-2 px-3 py-1.5 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors text-sm">
                    <UploadIcon />
                    {isUploading ? 'Uploading...' : 'Upload'}
                  </div>
                </label>
              </div>

              {uploads.length === 0 ? (
                <p className="text-sm text-muted-foreground">No attachments uploaded.</p>
              ) : (
                <div className="space-y-3">
                  {uploads.map((upload) => (
                    <div key={upload._id} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg">
                      <div className="flex items-center gap-3 flex-1 min-w-0">
                        {upload.filename && isImage(upload.filename) ? (
                          <button
                            onClick={() => setViewingImage(upload.url)}
                            className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
                          >
                            <ImageIcon />
                            <span className="text-sm truncate">{upload.filename}</span>
                          </button>
                        ) : (
                          <div className="flex items-center gap-2">
                            <FileIcon className="text-muted-foreground" />
                            <span className="text-sm text-card-foreground truncate">
                              {upload.filename || 'Unknown file'}
                            </span>
                          </div>
                        )}
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <span className="text-xs text-muted-foreground">
                          {formatFileSize(upload.size || 0)}
                        </span>
                        <button
                          onClick={() => handleDeleteUpload(upload._id)}
                          className="p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded transition-colors"
                          title="Delete file"
                        >
                          <TrashIcon />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Image Viewer Modal */}
      <ImageViewerModal 
        imageUrl={viewingImage} 
        onClose={() => setViewingImage(null)} 
      />
    </div>
  );
};

export default VulnerabilityInstanceDetailsPage;
