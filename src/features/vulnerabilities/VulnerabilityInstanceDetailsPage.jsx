// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstanceDetailsPage.jsx (UPDATED)
// PURPOSE: Displays detailed view of a vulnerability instance with image handling
// SOC 2 NOTES: Centralized icon management, secure file handling, audit logging
// =======================================================================

import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  getVulnerabilityInstance,
  updateVulnerabilityInstance,
  addUploads,
  deleteUpload
} from '../../api/projectVulnerabilitiesApi';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';
import RichTextEditor from '../../components/RichTextEditor';
import ImageViewerModal from '../../components/ImageViewerModal';
import AddUploadModal from '../../components/AddUploadModal';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

// ✅ CENTRALIZED ICON IMPORTS (SOC 2: Single source of truth)
import {
  ArrowLeftIcon,
  SaveIcon,
  PencilIcon,
  BugIcon,
  AlertTriangleIcon,
  UploadIcon,
  TrashIcon,
  ImageIcon,
  FileIcon,
  LinkIcon,
  CalendarIcon,
  UserIcon,
  InfoIcon,
  ClipboardIcon,
  XIcon,
  EyeIcon,
  GridIcon,
  ListIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from '../../components/Icons';

// ✅ SOC 2: Custom Delete Confirmation Dialog
const DeleteConfirmationDialog = ({
  isOpen,
  onClose,
  onConfirm,
  title = 'Delete File',
  message = 'Are you sure you want to delete',
  itemName = '',
  confirmText = 'Delete',
  isDeleting = false
}) => {
  const { theme } = useTheme();

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={!isDeleting ? onClose : undefined}
      />

      <div
        className={`${theme} relative bg-card border border-border rounded-xl shadow-2xl max-w-md w-full mx-4 p-6`}
      >
        <button
          onClick={onClose}
          disabled={isDeleting}
          className="absolute right-4 top-4 p-1 text-muted-foreground hover:text-foreground transition-colors rounded"
          aria-label="Close dialog"
        >
          <XIcon className="w-4 h-4" />
        </button>

        <div className="text-center">
          <div className="w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertTriangleIcon className="w-8 h-8 text-red-600" />
          </div>

          <h3 className="text-lg font-semibold text-foreground mb-2">
            {title}
          </h3>
          <p className="text-muted-foreground mb-6">
            {message}{' '}
            {itemName && (
              <span className="font-medium text-foreground">
                "{itemName}"
              </span>
            )}
            ? This action cannot be undone.
          </p>

          <div className="flex gap-3 justify-center">
            <button
              onClick={onClose}
              disabled={isDeleting}
              className="px-4 py-2 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-medium transition-all duration-200 disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              onClick={onConfirm}
              disabled={isDeleting}
              className="px-4 py-2 bg-red-600 text-white hover:bg-red-700 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 flex items-center gap-2 min-w-[100px] justify-center"
            >
              {isDeleting ? (
                <>
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                  Deleting...
                </>
              ) : (
                <>
                  <TrashIcon className="w-4 h-4" />
                  {confirmText}
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// ✅ SOC 2: Enhanced Image Gallery Component
const ImageGallery = ({ images, onImageClick, onDeleteClick }) => {
  const [viewMode, setViewMode] = useState('grid');
  const [currentPage, setCurrentPage] = useState(1);
  const imagesPerPage = 6;

  const totalPages = Math.ceil(images.length / imagesPerPage);
  const startIndex = (currentPage - 1) * imagesPerPage;
  const currentImages = images.slice(startIndex, startIndex + imagesPerPage);

  // ✅ SOC 2: Safe image URL construction
  const getImageUrl = (upload) => {
    if (!upload.filePath) {
      console.warn('No filePath found for upload:', upload._id);
      return null;
    }

    const baseUrl =
      import.meta.env.VITE_SERVER_URL || 'http://localhost:3000';
    const cleanPath = upload.filePath.startsWith('/')
      ? upload.filePath.slice(1)
      : upload.filePath;
    const fullUrl = `${baseUrl}/${cleanPath}`;

    console.log(`📸 Generated image URL for: ${upload._id}`);
    return fullUrl;
  };

  const isImage = (upload) => {
    const filename = upload.caption || upload.filename || '';
    if (!filename) return false;

    const imageExtensions = [
      '.jpg',
      '.jpeg',
      '.png',
      '.gif',
      '.bmp',
      '.webp'
    ];
    return imageExtensions.some((ext) =>
      filename.toLowerCase().endsWith(ext)
    );
  };

  if (images.length === 0) {
    return (
      <div className="text-center py-8">
        <ImageIcon className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
        <p className="text-sm text-muted-foreground">No images uploaded.</p>
      </div>
    );
  }

  return (
    <div>
      {/* View Mode Controls */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <h4 className="text-sm font-medium text-foreground">
            Images ({images.length})
          </h4>
          <div className="flex rounded-lg border border-border overflow-hidden">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-1.5 text-xs transition-colors ${
                viewMode === 'grid'
                  ? 'bg-primary text-primary-foreground'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted'
              }`}
              title="Grid View"
              aria-label="Grid view"
            >
              <GridIcon className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-1.5 text-xs transition-colors ${
                viewMode === 'list'
                  ? 'bg-primary text-primary-foreground'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted'
              }`}
              title="List View"
              aria-label="List view"
            >
              <ListIcon className="w-4 h-4" />
            </button>
          </div>
        </div>

        {totalPages > 1 && (
          <span className="text-xs text-muted-foreground">
            Page {currentPage} of {totalPages}
          </span>
        )}
      </div>

      {/* Grid View */}
      {viewMode === 'grid' ? (
        <div className="grid grid-cols-2 gap-3">
          {currentImages.map((upload, index) => {
            const imageUrl = getImageUrl(upload);
            const displayName = upload.caption || upload.filename || 'Image';

            return (
              <div key={upload._id || index} className="relative group">
                <div className="aspect-square rounded-lg overflow-hidden border border-border bg-muted">
                  {imageUrl ? (
                    <img
                      src={imageUrl}
                      alt={displayName}
                      className="w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform duration-200"
                      onClick={() => onImageClick(imageUrl)}
                      onError={(e) => {
                        console.error(
                          '❌ Failed to load image:',
                          upload._id
                        );
                        e.target.style.display = 'none';
                      }}
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      <ImageIcon className="w-8 h-8 text-muted-foreground" />
                    </div>
                  )}
                </div>

                {/* Overlay */}
                <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-lg flex items-center justify-center gap-2">
                  <button
                    onClick={() => onImageClick(imageUrl)}
                    className="p-2 bg-white/20 backdrop-blur-sm rounded-lg text-white hover:bg-white/30 transition-colors"
                    title="Preview"
                    aria-label="Preview image"
                  >
                    <EyeIcon className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() =>
                      onDeleteClick(upload._id, displayName)
                    }
                    className="p-2 bg-red-500/80 backdrop-blur-sm rounded-lg text-white hover:bg-red-600/80 transition-colors"
                    title="Delete"
                    aria-label="Delete image"
                  >
                    <TrashIcon className="w-4 h-4" />
                  </button>
                </div>

                <p className="mt-2 text-xs text-center text-muted-foreground truncate" title={displayName}>
                  {displayName}
                </p>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="space-y-2">
          {currentImages.map((upload, index) => {
            const imageUrl = getImageUrl(upload);
            const displayName = upload.caption || upload.filename || 'Image';

            return (
              <div
                key={upload._id || index}
                className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg border hover:bg-muted/50 transition-colors"
              >
                <div className="w-12 h-12 rounded-md overflow-hidden border border-border bg-muted flex-shrink-0">
                  {imageUrl ? (
                    <img
                      src={imageUrl}
                      alt={displayName}
                      className="w-full h-full object-cover cursor-pointer"
                      onClick={() => onImageClick(imageUrl)}
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                  ) : null}
                  <div
                    className="w-full h-full flex items-center justify-center"
                    style={{
                      display: imageUrl ? 'none' : 'flex'
                    }}
                  >
                    <ImageIcon className="w-4 h-4 text-muted-foreground" />
                  </div>
                </div>

                <div className="flex-1 min-w-0">
                  <p className="text-sm text-foreground truncate">
                    {displayName}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    Click to preview
                  </p>
                </div>

                <div className="flex gap-1">
                  <button
                    onClick={() => onImageClick(imageUrl)}
                    className="p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded transition-colors"
                    title="Preview"
                    aria-label="Preview image"
                  >
                    <EyeIcon className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() =>
                      onDeleteClick(upload._id, displayName)
                    }
                    className="p-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors"
                    title="Delete"
                    aria-label="Delete image"
                  >
                    <TrashIcon className="w-4 h-4" />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center gap-2 mt-4">
          <button
            onClick={() =>
              setCurrentPage((prev) => Math.max(1, prev - 1))
            }
            disabled={currentPage === 1}
            className="p-2 text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            title="Previous page"
            aria-label="Previous page"
          >
            <ChevronLeftIcon className="w-4 h-4" />
          </button>

          <span className="text-sm text-muted-foreground px-3">
            {currentPage} / {totalPages}
          </span>

          <button
            onClick={() =>
              setCurrentPage((prev) =>
                Math.min(totalPages, prev + 1)
              )
            }
            disabled={currentPage === totalPages}
            className="p-2 text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            title="Next page"
            aria-label="Next page"
          >
            <ChevronRightIcon className="w-4 h-4" />
          </button>
        </div>
      )}
    </div>
  );
};

const VulnerabilityInstanceDetailsPage = () => {
  const { vulnId } = useParams();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [editData, setEditData] = useState({});
  const [uploads, setUploads] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);
  const [viewingImage, setViewingImage] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [deleteTargetId, setDeleteTargetId] = useState(null);
  const [deleteTargetName, setDeleteTargetName] = useState('');
  const [isDeleting, setIsDeleting] = useState(false);

  const { theme, color } = useTheme();
  const { user } = useAuth();

  // ✅ SOC 2: Fetch vulnerability instance data
  const fetchData = async () => {
    if (!vulnId) return;

    setIsLoading(true);
    try {
      console.log(`📂 Fetching vulnerability instance: ${vulnId}`);

      const response = await getVulnerabilityInstance(vulnId);
      if (response.success && response.data) {
        console.log(`✅ Vulnerability data retrieved`);
        setVulnerability(response.data);
        setUploads(response.data.uploads || []);

        setEditData({
          description: response.data.description || '',
          impact: response.data.impact || '',
          recommendation: response.data.recommendation || '',
          severity: response.data.severity || 'Medium',
          affectedUrl:
            response.data.affected_url ||
            response.data.affectedUrl ||
            '',
          affectedParameter:
            response.data.affected_parameter ||
            response.data.affectedParameter ||
            '',
          attackValue:
            response.data.attack_value ||
            response.data.attackValue ||
            ''
        });
      }
    } catch (error) {
      console.error('❌ Error fetching vulnerability:', error.message);
      toast.error('Could not load vulnerability details.');
      navigate(-1);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [vulnId]);

  // ✅ SOC 2: Save vulnerability updates with audit logging
  const handleSave = async () => {
    setIsSaving(true);
    try {
      console.log(`💾 Saving vulnerability updates: ${vulnId}`);

      const response = await updateVulnerabilityInstance(vulnId, editData);
      if (response.success) {
        console.log(`✅ Vulnerability updated successfully`);
        setVulnerability((prev) => ({
          ...prev,
          ...editData
        }));
        setIsEditing(false);
        toast.success('Vulnerability updated successfully!');
      }
    } catch (error) {
      console.error('❌ Error updating vulnerability:', error.message);
      toast.error(error.message || 'Failed to update vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    if (vulnerability) {
      setEditData({
        description: vulnerability.description || '',
        impact: vulnerability.impact || '',
        recommendation: vulnerability.recommendation || '',
        severity: vulnerability.severity || 'Medium',
        affectedUrl:
          vulnerability.affected_url || vulnerability.affectedUrl || '',
        affectedParameter:
          vulnerability.affected_parameter ||
          vulnerability.affectedParameter ||
          '',
        attackValue:
          vulnerability.attack_value || vulnerability.attackValue || ''
      });
    }
    setIsEditing(false);
  };

  // ✅ SOC 2: File upload handler
  const handleFileUpload = async (files, captions) => {
    if (!vulnId) {
      toast.error('Cannot upload: Vulnerability ID not found');
      return;
    }

    console.log(`📤 Uploading ${files.length} file(s)`);

    setIsUploading(true);
    try {
      const formData = new FormData();

      files.forEach((file) => {
        formData.append('images', file);
      });

      captions.forEach((caption) => {
        formData.append('captions', caption || '');
      });

      const response = await addUploads(vulnId, formData);

      if (response.success) {
        const newUploads =
          response.data?.uploads ||
          response.data ||
          response.uploads ||
          [];

        if (Array.isArray(newUploads) && newUploads.length > 0) {
          console.log(`✅ ${files.length} file(s) uploaded successfully`);
          setVulnerability((prev) => ({
            ...prev,
            uploads: newUploads
          }));
          toast.success(`${files.length} file(s) uploaded successfully!`);
        } else {
          await fetchData();
        }

        setIsUploadModalOpen(false);
      }
    } catch (error) {
      console.error('❌ Error uploading files:', error.message);
      toast.error(error.message || 'Failed to upload files');
    } finally {
      setIsUploading(false);
    }
  };

  // ✅ SOC 2: Delete file handler with confirmation
  const openDeleteDialog = (uploadId, fileName) => {
    console.log(`🗑️ Opening delete dialog for: ${uploadId}`);
    setDeleteTargetId(uploadId);
    setDeleteTargetName(fileName);
    setIsDeleteDialogOpen(true);
  };

  const closeDeleteDialog = () => {
    setDeleteTargetId(null);
    setDeleteTargetName('');
    setIsDeleteDialogOpen(false);
  };

  const confirmDelete = async () => {
    if (!deleteTargetId) return;

    setIsDeleting(true);
    try {
      console.log(`🗑️ Deleting upload: ${deleteTargetId}`);

      const response = await deleteUpload(vulnId, deleteTargetId);

      if (response.success) {
        console.log(`✅ Upload deleted successfully`);
        setVulnerability((prev) => ({
          ...prev,
          uploads: prev.uploads.filter(
            (upload) => upload._id !== deleteTargetId
          )
        }));
        toast.success('Image deleted successfully!');
        closeDeleteDialog();
      }
    } catch (error) {
      console.error('❌ Error deleting upload:', error.message);
      toast.error(error.message || 'Failed to delete image');
    } finally {
      setIsDeleting(false);
    }
  };

  // ✅ SOC 2: Severity color mapping
  const getSeverityColor = (severity) => {
    const colors = {
      Critical:
        'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      High: 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      Medium:
        'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      Low: 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      Informational:
        'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return (
      colors[severity] ||
      'text-gray-600 bg-gray-50 border-gray-200 dark:bg-gray-900/20'
    );
  };

  const imageFiles = uploads.filter((upload) => {
    const filename = upload.caption || upload.filename || '';
    const imageExtensions = [
      '.jpg',
      '.jpeg',
      '.png',
      '.gif',
      '.bmp',
      '.webp'
    ];
    return imageExtensions.some((ext) =>
      filename.toLowerCase().endsWith(ext)
    );
  });

  if (isLoading) {
    return (
      <div
        className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}
      >
        <Spinner message="Loading vulnerability details..." />
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div
        className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}
      >
        <div className="text-center max-w-md mx-auto">
          <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
            <BugIcon className="w-8 h-8 text-muted-foreground" />
          </div>
          <h2 className="text-xl font-semibold text-foreground mb-2">
            Vulnerability Not Found
          </h2>
          <p className="text-muted-foreground mb-6">
            The requested vulnerability could not be found.
          </p>
          <button
            onClick={() => navigate(-1)}
            className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
            aria-label="Go back"
          >
            <ArrowLeftIcon className="w-4 h-4" />
            Go Back
          </button>
        </div>
      </div>
    );
  }

  const displayName =
    vulnerability.vulnName ||
    vulnerability.vulnerability_name ||
    'Vulnerability Details';

  return (
    <div className={`${theme} theme-${color} min-h-screen bg-background`}>
      {/* ========== STICKY HEADER ========== */}
      <div className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-10">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-4 flex-1">
              <button
                onClick={() => navigate(-1)}
                className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors px-3 py-2 rounded-lg hover:bg-accent"
                aria-label="Go back"
              >
                <ArrowLeftIcon className="w-4 h-4" />
                <span className="text-sm font-medium">Back</span>
              </button>

              <div className="h-6 w-px bg-border" />

              <div className="flex items-center gap-3 flex-1">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <BugIcon className="text-primary w-5 h-5" />
                </div>
                <div className="min-w-0">
                  <h1 className="text-lg font-bold text-foreground truncate">
                    {displayName}
                  </h1>
                  <p className="text-xs text-muted-foreground truncate">
                    {vulnerability.project_name} • by{' '}
                    {vulnerability.user_name}
                  </p>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            {(user?.role === 'admin' || user?.role === 'tester') && (
              <div className="flex gap-3">
                {isEditing ? (
                  <>
                    <button
                      onClick={handleCancel}
                      disabled={isSaving}
                      className="px-4 py-2 border border-input text-muted-foreground bg-background hover:bg-accent rounded-lg font-medium transition-all disabled:opacity-50"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleSave}
                      disabled={isSaving}
                      className="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-medium transition-all disabled:opacity-50 flex items-center gap-2"
                    >
                      {isSaving ? (
                        <>
                          <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                          Saving...
                        </>
                      ) : (
                        <>
                          <SaveIcon className="w-4 h-4" />
                          Save
                        </>
                      )}
                    </button>
                  </>
                ) : (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="inline-flex items-center gap-2 px-4 py-2 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/80 transition-colors font-medium"
                    aria-label="Edit vulnerability"
                  >
                    <PencilIcon className="w-4 h-4" />
                    Edit
                  </button>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* ========== MAIN CONTENT ========== */}
      <div className="px-6 py-8">
        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          {/* Severity */}
          <div className="bg-card rounded-lg border border-border p-4">
            <div className="flex items-center gap-2 mb-2">
              <AlertTriangleIcon className="text-muted-foreground w-4 h-4" />
              <span className="text-xs font-medium text-muted-foreground">
                Severity
              </span>
            </div>
            {isEditing ? (
              <select
                value={editData.severity}
                onChange={(e) =>
                  setEditData((prev) => ({
                    ...prev,
                    severity: e.target.value
                  }))
                }
                className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
              >
                <option value="Critical">Critical</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
                <option value="Informational">Informational</option>
              </select>
            ) : (
              <div
                className={`inline-flex items-center px-2 py-1 rounded text-xs font-semibold border ${getSeverityColor(
                  vulnerability.severity
                )}`}
              >
                <AlertTriangleIcon className="w-3 h-3 mr-1" />
                {vulnerability.severity || 'Unknown'}
              </div>
            )}
          </div>

          {/* Tester */}
          <div className="bg-card rounded-lg border border-border p-4">
            <div className="flex items-center gap-2 mb-2">
              <UserIcon className="text-muted-foreground w-4 h-4" />
              <span className="text-xs font-medium text-muted-foreground">
                Tester
              </span>
            </div>
            <p className="font-semibold text-foreground text-sm">
              {vulnerability.found_by || vulnerability.user_name || 'N/A'}
            </p>
          </div>

          {/* Created */}
          <div className="bg-card rounded-lg border border-border p-4">
            <div className="flex items-center gap-2 mb-2">
              <CalendarIcon className="text-muted-foreground w-4 h-4" />
              <span className="text-xs font-medium text-muted-foreground">
                Created
              </span>
            </div>
            <p className="font-semibold text-foreground text-sm">
              {vulnerability.createdAt
                ? new Date(vulnerability.createdAt).toLocaleDateString()
                : 'N/A'}
            </p>
          </div>

          {/* Status */}
          <div className="bg-card rounded-lg border border-border p-4">
            <div className="flex items-center gap-2 mb-2">
              <InfoIcon className="text-muted-foreground w-4 h-4" />
              <span className="text-xs font-medium text-muted-foreground">
                Status
              </span>
            </div>
            <span
              className={`inline-flex items-center px-2 py-1 rounded text-xs font-semibold ${
                vulnerability.review === 'Fixed'
                  ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
                  : vulnerability.review === 'In Progress'
                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                  : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
              }`}
            >
              {vulnerability.review || 'Open'}
            </span>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main Content - 3 columns */}
          <div className="lg:col-span-3 space-y-6">
            {/* Technical Details */}
            <div className="bg-card rounded-lg border border-border overflow-hidden">
              <div className="p-4 border-b border-border">
                <h2 className="text-lg font-semibold text-foreground flex items-center gap-2">
                  <ClipboardIcon className="w-5 h-5" />
                  Technical Details
                </h2>
              </div>
              <div className="p-4 space-y-4">
                {/* Affected URL */}
                <div>
                  <label className="block text-sm font-medium text-muted-foreground mb-2">
                    Affected URL
                  </label>
                  {isEditing ? (
                    <div className="relative">
                      <LinkIcon className="absolute left-3 top-3 text-muted-foreground w-4 h-4" />
                      <input
                        type="url"
                        value={editData.affectedUrl}
                        onChange={(e) =>
                          setEditData((prev) => ({
                            ...prev,
                            affectedUrl: e.target.value
                          }))
                        }
                        className="w-full pl-10 pr-4 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
                        placeholder="https://example.com/..."
                      />
                    </div>
                  ) : (
                    <div className="p-3 bg-muted/30 rounded-lg">
                      {vulnerability.affected_url ||
                      vulnerability.affectedUrl ? (
                        <a
                          href={
                            vulnerability.affected_url ||
                            vulnerability.affectedUrl
                          }
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-primary hover:underline flex items-center gap-2 text-sm"
                        >
                          <LinkIcon className="w-4 h-4" />
                          {vulnerability.affected_url ||
                            vulnerability.affectedUrl}
                        </a>
                      ) : (
                        <span className="text-muted-foreground">
                          Not specified
                        </span>
                      )}
                    </div>
                  )}
                </div>

                {/* Description */}
                <div>
                  <label className="block text-sm font-medium text-muted-foreground mb-2">
                    Description
                  </label>
                  {isEditing ? (
                    <RichTextEditor
                      value={editData.description}
                      onChange={(value) =>
                        setEditData((prev) => ({
                          ...prev,
                          description: value
                        }))
                      }
                      placeholder="Describe the vulnerability..."
                      height={200}
                    />
                  ) : (
                    <div
                      className="prose prose-sm max-w-none dark:prose-invert p-3 bg-muted/20 rounded-lg"
                      dangerouslySetInnerHTML={{
                        __html:
                          vulnerability.description ||
                          '<p class="text-muted-foreground">No description provided.</p>'
                      }}
                    />
                  )}
                </div>

                {/* Impact */}
                <div>
                  <label className="block text-sm font-medium text-muted-foreground mb-2">
                    Impact
                  </label>
                  {isEditing ? (
                    <RichTextEditor
                      value={editData.impact}
                      onChange={(value) =>
                        setEditData((prev) => ({
                          ...prev,
                          impact: value
                        }))
                      }
                      placeholder="Describe the impact..."
                      height={200}
                    />
                  ) : (
                    <div
                      className="prose prose-sm max-w-none dark:prose-invert p-3 bg-muted/20 rounded-lg"
                      dangerouslySetInnerHTML={{
                        __html:
                          vulnerability.impact ||
                          '<p class="text-muted-foreground">No impact information.</p>'
                      }}
                    />
                  )}
                </div>

                {/* Recommendation */}
                <div>
                  <label className="block text-sm font-medium text-muted-foreground mb-2">
                    Recommendation
                  </label>
                  {isEditing ? (
                    <RichTextEditor
                      value={editData.recommendation}
                      onChange={(value) =>
                        setEditData((prev) => ({
                          ...prev,
                          recommendation: value
                        }))
                      }
                      placeholder="Provide remediation steps..."
                      height={200}
                    />
                  ) : (
                    <div
                      className="prose prose-sm max-w-none dark:prose-invert p-3 bg-muted/20 rounded-lg"
                      dangerouslySetInnerHTML={{
                        __html:
                          vulnerability.recommendation ||
                          '<p class="text-muted-foreground">No recommendations.</p>'
                      }}
                    />
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar - 1 column */}
          <div className="space-y-6">
            {/* Attachments Section */}
            <div className="bg-card border border-border rounded-lg p-4 space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-semibold text-foreground">
                  Attachments
                </h3>
                <button
                  onClick={() => setIsUploadModalOpen(true)}
                  disabled={isUploading}
                  className="flex items-center gap-1 px-3 py-1 bg-primary text-primary-foreground hover:bg-primary/90 rounded text-xs font-medium disabled:opacity-50 transition-colors"
                  aria-label="Upload files"
                >
                  <UploadIcon className="w-3 h-3" />
                  Upload
                </button>
              </div>

              {imageFiles.length > 0 ? (
                <ImageGallery
                  images={imageFiles}
                  onImageClick={(url) => setViewingImage(url)}
                  onDeleteClick={openDeleteDialog}
                />
              ) : (
                <div className="text-center py-8">
                  <FileIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                  <p className="text-xs text-muted-foreground">
                    No images uploaded
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Modals */}
      <AddUploadModal
        isOpen={isUploadModalOpen}
        onClose={() => setIsUploadModalOpen(false)}
        onSubmit={handleFileUpload}
        isUploading={isUploading}
      />

      <ImageViewerModal
        isOpen={!!viewingImage}
        imageUrl={viewingImage}
        onClose={() => setViewingImage(null)}
      />

      <DeleteConfirmationDialog
        isOpen={isDeleteDialogOpen}
        onClose={closeDeleteDialog}
        onConfirm={confirmDelete}
        itemName={deleteTargetName}
        isDeleting={isDeleting}
      />
    </div>
  );
};

export default VulnerabilityInstanceDetailsPage;
