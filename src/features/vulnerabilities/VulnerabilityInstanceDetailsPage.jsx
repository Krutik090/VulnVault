// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstanceDetailsPage.jsx (FIXED)
// PURPOSE: Enhanced detailed view with WORKING image preview and optimized layout.
// =======================================================================
import { useState, useEffect, memo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getVulnerabilityInstance, updateVulnerabilityInstance, addUploads, deleteUpload } from '../../api/projectVulnerabilitiesApi';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';
import RichTextEditor from '../../components/RichTextEditor';
import ImageViewerModal from '../../components/ImageViewerModal';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

// Icons (keeping all existing icons)
const ArrowLeftIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const EditIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
  </svg>
);

const BugIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const UploadIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const ImageIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const FileIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
  </svg>
);

const LinkIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
);

const CalendarIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const UserIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
  </svg>
);

const InfoIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const ClipboardIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
  </svg>
);

const XIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
  </svg>
);

const EyeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const GridIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
  </svg>
);

const ListIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
  </svg>
);

const ChevronLeftIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
  </svg>
);

const ChevronRightIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
  </svg>
);

// Custom Delete Confirmation Dialog Component
const DeleteConfirmationDialog = ({ isOpen, onClose, onConfirm, fileName, isDeleting }) => {
  const { theme } = useTheme();

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={!isDeleting ? onClose : undefined}
      />
      
      {/* Dialog */}
      <div className={`${theme} relative bg-card border border-border rounded-xl shadow-2xl max-w-md w-full mx-4 p-6`}>
        {/* Close Button */}
        <button
          onClick={onClose}
          disabled={isDeleting}
          className="absolute right-4 top-4 p-1 text-muted-foreground hover:text-foreground transition-colors rounded"
        >
          <XIcon />
        </button>

        {/* Content */}
        <div className="text-center">
          <div className="w-16 h-16 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertTriangleIcon className="w-8 h-8 text-red-600" />
          </div>
          
          <h3 className="text-lg font-semibold text-card-foreground mb-2">Delete File</h3>
          <p className="text-muted-foreground mb-6">
            Are you sure you want to delete <span className="font-medium text-card-foreground">"{fileName}"</span>? 
            This action cannot be undone.
          </p>

          <div className="flex gap-3 justify-center">
            <button
              onClick={onClose}
              disabled={isDeleting}
              className="px-4 py-2 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-medium transition-all duration-200 disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              onClick={onConfirm}
              disabled={isDeleting}
              className="px-4 py-2 bg-red-600 text-white hover:bg-red-700 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 flex items-center gap-2 min-w-[100px] justify-center"
            >
              {isDeleting ? (
                <>
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                  Deleting...
                </>
              ) : (
                <>
                  <TrashIcon />
                  Delete
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// FIXED: Enhanced Image Gallery Component with proper URL handling
const ImageGallery = ({ images, onImageClick, onDeleteClick }) => {
  const [viewMode, setViewMode] = useState('grid');
  const [currentPage, setCurrentPage] = useState(1);
  const imagesPerPage = 6;

  const totalPages = Math.ceil(images.length / imagesPerPage);
  const startIndex = (currentPage - 1) * imagesPerPage;
  const currentImages = images.slice(startIndex, startIndex + imagesPerPage);

  // âœ… FIXED: Proper image URL construction
  const getImageUrl = (upload) => {
    if (!upload.filePath) {
      console.warn('No filePath found for upload:', upload);
      return null;
    }

    // Get base URL from environment or use default
    const baseUrl = import.meta.env.VITE_SERVER_URL || 'http://localhost:3000';
    
    // Clean the file path and construct full URL
    const cleanPath = upload.filePath.startsWith('/') ? upload.filePath.slice(1) : upload.filePath;
    const fullUrl = `${baseUrl}/${cleanPath}`;
    
    console.log('Generated image URL:', fullUrl); // Debug log
    return fullUrl;
  };

  const isImage = (upload) => {
    // Check both filename and caption for image extensions
    const filename = upload.caption || upload.filename || '';
    if (!filename) return false;
    
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));
  };

  if (images.length === 0) {
    return (
      <div className="text-center py-8">
        <ImageIcon className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
        <p className="text-sm text-muted-foreground">No images uploaded.</p>
      </div>
    );
  }

  return (
    <div>
      {/* View Controls */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <h4 className="text-sm font-medium text-card-foreground">
            Images ({images.length})
          </h4>
          <div className="flex rounded-lg border border-border overflow-hidden">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-1.5 text-xs transition-colors ${
                viewMode === 'grid'
                  ? 'bg-primary text-primary-foreground'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted'
              }`}
              title="Grid View"
            >
              <GridIcon />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-1.5 text-xs transition-colors ${
                viewMode === 'list'
                  ? 'bg-primary text-primary-foreground'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted'
              }`}
              title="List View"
            >
              <ListIcon />
            </button>
          </div>
        </div>

        {totalPages > 1 && (
          <span className="text-xs text-muted-foreground">
            Page {currentPage} of {totalPages}
          </span>
        )}
      </div>

      {/* Images Display */}
      {viewMode === 'grid' ? (
        <div className="grid grid-cols-2 gap-3">
          {currentImages.map((upload, index) => {
            const imageUrl = getImageUrl(upload);
            const displayName = upload.caption || upload.filename || 'Unknown image';
            
            return (
              <div key={upload._id || index} className="relative group">
                <div className="aspect-square rounded-lg overflow-hidden border border-border bg-muted">
                  {imageUrl ? (
                    <img
                      src={imageUrl}
                      alt={displayName}
                      className="w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform duration-200"
                      onClick={() => {
                        console.log('Clicking image with URL:', imageUrl); // Debug log
                        onImageClick(imageUrl);
                      }}
                      onError={(e) => {
                        console.error('Failed to load image:', imageUrl);
                        e.target.onerror = null;
                        e.target.style.display = 'none';
                        e.target.parentElement.classList.add('flex', 'items-center', 'justify-center');
                        e.target.parentElement.innerHTML = '<div class="text-center"><svg class="w-8 h-8 text-muted-foreground mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg><span class="text-xs text-muted-foreground">Failed to load</span></div>';
                      }}
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center">
                      <div className="text-center">
                        <ImageIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                        <span className="text-xs text-muted-foreground">No image URL</span>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Image Overlay */}
                <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-lg flex items-center justify-center">
                  <div className="flex gap-2">
                    <button
                      onClick={() => {
                        console.log('Preview button clicked with URL:', imageUrl); // Debug log
                        onImageClick(imageUrl);
                      }}
                      className="p-2 bg-white/20 backdrop-blur-sm rounded-lg text-white hover:bg-white/30 transition-colors"
                      title="Preview"
                    >
                      <EyeIcon />
                    </button>
                    <button
                      onClick={() => onDeleteClick(upload._id, displayName)}
                      className="p-2 bg-red-500/80 backdrop-blur-sm rounded-lg text-white hover:bg-red-600/80 transition-colors"
                      title="Delete"
                    >
                      <TrashIcon />
                    </button>
                  </div>
                </div>
                
                {/* Image Name */}
                <p className="mt-2 text-xs text-center text-muted-foreground truncate" title={displayName}>
                  {displayName}
                </p>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="space-y-2">
          {currentImages.map((upload, index) => {
            const imageUrl = getImageUrl(upload);
            const displayName = upload.caption || upload.filename || 'Unknown image';
            
            return (
              <div key={upload._id || index} className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg border hover:bg-muted/50 transition-colors">
                <div className="w-12 h-12 rounded-md overflow-hidden border border-border bg-muted flex-shrink-0">
                  {imageUrl ? (
                    <img
                      src={imageUrl}
                      alt={displayName}
                      className="w-full h-full object-cover cursor-pointer"
                      onClick={() => onImageClick(imageUrl)}
                      onError={(e) => {
                        console.error('Failed to load thumbnail:', imageUrl);
                        e.target.style.display = 'none';
                      }}
                    />
                  ) : null}
                  <div className="w-full h-full flex items-center justify-center" style={{ display: imageUrl ? 'none' : 'flex' }}>
                    <ImageIcon className="w-4 h-4 text-muted-foreground" />
                  </div>
                </div>
                
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-card-foreground truncate">
                    {displayName}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    Click to preview
                  </p>
                </div>
                
                <div className="flex gap-1">
                  <button
                    onClick={() => onImageClick(imageUrl)}
                    className="p-2 text-blue-500 hover:text-blue-700 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded transition-colors"
                    title="Preview"
                  >
                    <EyeIcon />
                  </button>
                  <button
                    onClick={() => onDeleteClick(upload._id, displayName)}
                    className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors"
                    title="Delete"
                  >
                    <TrashIcon />
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center gap-2 mt-4">
          <button
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={currentPage === 1}
            className="p-2 text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            title="Previous page"
          >
            <ChevronLeftIcon />
          </button>
          
          <span className="text-sm text-muted-foreground px-3">
            {currentPage} / {totalPages}
          </span>
          
          <button
            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
            disabled={currentPage === totalPages}
            className="p-2 text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            title="Next page"
          >
            <ChevronRightIcon />
          </button>
        </div>
      )}
    </div>
  );
};

const VulnerabilityInstanceDetailsPage = () => {
  const { vulnId } = useParams();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [editData, setEditData] = useState({});
  const [uploads, setUploads] = useState([]);
  const [isUploading, setIsUploading] = useState(false);
  
  // Image preview and delete dialog states
  const [viewingImage, setViewingImage] = useState(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [deleteTargetId, setDeleteTargetId] = useState(null);
  const [deleteTargetName, setDeleteTargetName] = useState('');
  const [isDeleting, setIsDeleting] = useState(false);
  
  const { theme, color } = useTheme();
  const { user } = useAuth();

  const fetchData = async () => {
    if (!vulnId) return;
    
    setIsLoading(true);
    try {
      const response = await getVulnerabilityInstance(vulnId);
      if (response.success && response.data) {
        console.log('Vulnerability data received:', response.data); // Debug log
        setVulnerability(response.data);
        setUploads(response.data.uploads || []);
        console.log('Uploads set:', response.data.uploads); // Debug log
        
        setEditData({
          description: response.data.description || '',
          impact: response.data.impact || '',
          recommendation: response.data.recommendation || '',
          severity: response.data.severity || 'Medium',
          affectedUrl: response.data.affectedUrl || '',
          affectedParameter: response.data.affectedParameter || '',
          attackValue: response.data.attackValue || ''
        });
      }
    } catch (error) {
      console.error('Error fetching vulnerability:', error);
      toast.error('Could not load vulnerability details.');
      navigate(-1);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [vulnId]);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      const response = await updateVulnerabilityInstance(vulnId, editData);
      if (response.success) {
        setVulnerability(prev => ({ ...prev, ...editData }));
        setIsEditing(false);
        toast.success('Vulnerability updated successfully!');
      }
    } catch (error) {
      console.error('Error updating vulnerability:', error);
      toast.error(error.message || 'Failed to update vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    if (vulnerability) {
      setEditData({
        description: vulnerability.description || '',
        impact: vulnerability.impact || '',
        recommendation: vulnerability.recommendation || '',
        severity: vulnerability.severity || 'Medium',
        affectedUrl: vulnerability.affectedUrl || '',
        affectedParameter: vulnerability.affectedParameter || '',
        attackValue: vulnerability.attackValue || ''
      });
    }
    setIsEditing(false);
  };

  const handleFileUpload = async (e) => {
    const files = Array.from(e.target.files);
    if (files.length === 0) return;

    setIsUploading(true);
    try {
      const formData = new FormData();
      files.forEach(file => formData.append('uploads', file));

      const response = await addUploads(vulnId, formData);
      if (response.success) {
        const updatedVulnerability = response.data;
        
        if (updatedVulnerability && Array.isArray(updatedVulnerability.uploads)) {
          setUploads(updatedVulnerability.uploads);
          console.log('New uploads set:', updatedVulnerability.uploads); // Debug log
          toast.success(`${files.length} file(s) uploaded successfully!`);
        } else {
          throw new Error('Invalid response format');
        }
      }
    } catch (error) {
      console.error('Error uploading files:', error);
      toast.error(error.message || 'Failed to upload files');
    } finally {
      setIsUploading(false);
      e.target.value = '';
    }
  };

  // Open delete confirmation dialog
  const openDeleteDialog = (uploadId, fileName) => {
    setDeleteTargetId(uploadId);
    setDeleteTargetName(fileName);
    setIsDeleteDialogOpen(true);
  };

  // Close delete confirmation dialog
  const closeDeleteDialog = () => {
    setDeleteTargetId(null);
    setDeleteTargetName('');
    setIsDeleteDialogOpen(false);
  };

  // Confirm and execute delete
  const confirmDelete = async () => {
    if (!deleteTargetId) return;

    setIsDeleting(true);
    try {
      const response = await deleteUpload(vulnId, deleteTargetId);
      if (response.success) {
        setUploads(prev => prev.filter(upload => upload._id !== deleteTargetId));
        toast.success('File deleted successfully!');
        closeDeleteDialog();
      }
    } catch (error) {
      console.error('Error deleting upload:', error);
      toast.error(error.message || 'Failed to delete file');
    } finally {
      setIsDeleting(false);
    }
  };

  // âœ… FIXED: Open image preview with proper logging
  const openImagePreview = (imageUrl) => {
    console.log('Opening image preview with URL:', imageUrl); // Debug log
    if (imageUrl) {
      setViewingImage(imageUrl);
    } else {
      console.error('No image URL provided for preview');
      toast.error('Image URL not available');
    }
  };

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Informational': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  const isImage = (upload) => {
    // Check both filename and caption for image extensions
    const filename = upload.caption || upload.filename || '';
    if (!filename) return false;
    
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    return imageExtensions.some(ext => filename.toLowerCase().endsWith(ext));
  };

  const formatFileSize = (bytes) => {
    if (!bytes || bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // âœ… FIXED: Separate images and other files properly
  const imageFiles = uploads.filter(upload => isImage(upload));
  const otherFiles = uploads.filter(upload => !isImage(upload));

  console.log('Total uploads:', uploads.length); // Debug log
  console.log('Image files:', imageFiles.length); // Debug log
  console.log('Other files:', otherFiles.length); // Debug log

  if (isLoading) {
    return (
      <div className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}>
        <Spinner message="Loading vulnerability details..." />
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className={`${theme} theme-${color} min-h-screen bg-background flex items-center justify-center`}>
        <div className="text-center max-w-md mx-auto">
          <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
            <BugIcon className="w-8 h-8 text-muted-foreground" />
          </div>
          <h2 className="text-xl font-semibold text-card-foreground mb-2">Vulnerability Not Found</h2>
          <p className="text-muted-foreground mb-6">The requested vulnerability could not be found.</p>
          <button
            onClick={() => navigate(-1)}
            className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
          >
            <ArrowLeftIcon />
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`${theme} theme-${color} min-h-screen bg-background`}>
      {/* Enhanced Header with Breadcrumb */}
      <div className="border-b border-border bg-card/50 backdrop-blur-sm sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => navigate(-1)}
                className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors px-3 py-2 rounded-lg hover:bg-accent"
              >
                <ArrowLeftIcon />
                <span className="text-sm font-medium">Back to Instances</span>
              </button>
              
              <div className="h-6 w-px bg-border" />
              
              <div className="flex items-center gap-3">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <BugIcon className="text-primary" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-card-foreground">
                    {vulnerability.vulnName || 'Vulnerability Details'}
                  </h1>
                  <div className="flex items-center gap-3 text-sm text-muted-foreground">
                    {vulnerability.project_name && (
                      <span>Project: {vulnerability.project_name}</span>
                    )}
                    {vulnerability.user_name && (
                      <>
                        <span>â€¢</span>
                        <span>by {vulnerability.user_name}</span>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {(user?.role === 'admin' || user?.role === 'tester') && (
              <div className="flex gap-3">
                {isEditing ? (
                  <>
                    <button
                      onClick={handleCancel}
                      disabled={isSaving}
                      className="px-4 py-2 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleSave}
                      disabled={isSaving}
                      className="px-4 py-2 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isSaving ? (
                        <>
                          <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                          Saving...
                        </>
                      ) : (
                        <>
                          <SaveIcon />
                          Save Changes
                        </>
                      )}
                    </button>
                  </>
                ) : (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="inline-flex items-center gap-2 px-4 py-2 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/80 transition-colors font-medium"
                  >
                    <EditIcon />
                    Edit Vulnerability
                  </button>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-card rounded-xl border border-border p-6">
            <div className="flex items-center gap-3 mb-2">
              <AlertTriangleIcon className="text-muted-foreground" />
              <span className="text-sm font-medium text-muted-foreground">Severity</span>
            </div>
            {isEditing ? (
              <select
                value={editData.severity}
                onChange={(e) => setEditData(prev => ({ ...prev, severity: e.target.value }))}
                className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
              >
                <option value="Critical">Critical</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
                <option value="Informational">Informational</option>
              </select>
            ) : (
              <div className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold border ${getSeverityColor(vulnerability.severity)}`}>
                <AlertTriangleIcon className="w-4 h-4 mr-2" />
                {vulnerability.severity || 'Not specified'}
              </div>
            )}
          </div>

          <div className="bg-card rounded-xl border border-border p-6">
            <div className="flex items-center gap-3 mb-2">
              <UserIcon className="text-muted-foreground" />
              <span className="text-sm font-medium text-muted-foreground">Tester</span>
            </div>
            <p className="text-lg font-semibold text-card-foreground">
              {vulnerability.user_name || 'Not specified'}
            </p>
          </div>

          <div className="bg-card rounded-xl border border-border p-6">
            <div className="flex items-center gap-3 mb-2">
              <CalendarIcon className="text-muted-foreground" />
              <span className="text-sm font-medium text-muted-foreground">Created</span>
            </div>
            <p className="text-lg font-semibold text-card-foreground">
              {vulnerability.createdAt ? new Date(vulnerability.createdAt).toLocaleDateString() : 'Unknown'}
            </p>
          </div>

          <div className="bg-card rounded-xl border border-border p-6">
            <div className="flex items-center gap-3 mb-2">
              <InfoIcon className="text-muted-foreground" />
              <span className="text-sm font-medium text-muted-foreground">Status</span>
            </div>
            <span className={`inline-flex items-center px-3 py-1 rounded-lg text-sm font-semibold ${
              vulnerability.review === 'Fixed' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
              vulnerability.review === 'In Progress' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
              'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'
            }`}>
              {vulnerability.review || 'Open'}
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Main Content - 3 columns */}
          <div className="lg:col-span-3 space-y-8">
            {/* Technical Details */}
            <div className="bg-card rounded-xl border border-border overflow-hidden">
              <div className="p-6 border-b border-border">
                <h2 className="text-xl font-semibold text-card-foreground flex items-center gap-2">
                  <ClipboardIcon />
                  Technical Details
                </h2>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-muted-foreground mb-2">Affected URL</label>
                    {isEditing ? (
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <LinkIcon className="text-muted-foreground" />
                        </div>
                        <input
                          type="url"
                          value={editData.affectedUrl}
                          onChange={(e) => setEditData(prev => ({ ...prev, affectedUrl: e.target.value }))}
                          className="w-full pl-10 pr-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                          placeholder="https://example.com/vulnerable-page"
                        />
                      </div>
                    ) : (
                      <div className="p-3 bg-muted/30 rounded-lg">
                        {vulnerability.affectedUrl ? (
                          <a
                            href={vulnerability.affectedUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-primary hover:text-primary/80 hover:underline flex items-center gap-2"
                          >
                            <LinkIcon />
                            {vulnerability.affectedUrl}
                          </a>
                        ) : (
                          <span className="text-muted-foreground">Not specified</span>
                        )}
                      </div>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-muted-foreground mb-2">Affected Parameter</label>
                    {isEditing ? (
                      <input
                        type="text"
                        value={editData.affectedParameter}
                        onChange={(e) => setEditData(prev => ({ ...prev, affectedParameter: e.target.value }))}
                        className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                        placeholder="e.g., username, id, search"
                      />
                    ) : (
                      <div className="p-3 bg-muted/30 rounded-lg">
                        <span className="text-card-foreground">
                          {vulnerability.affectedParameter || 'Not specified'}
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {/* Attack Value */}
                <div className="mt-6">
                  <label className="block text-sm font-medium text-muted-foreground mb-2">Attack Value/Payload</label>
                  {isEditing ? (
                    <textarea
                      value={editData.attackValue}
                      onChange={(e) => setEditData(prev => ({ ...prev, attackValue: e.target.value }))}
                      rows={6}
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent resize-none font-mono text-sm"
                      placeholder="Enter the attack payload or value used..."
                    />
                  ) : (
                    <div className="p-4 bg-muted/30 rounded-lg border">
                      {vulnerability.attackValue ? (
                        <pre className="text-sm text-card-foreground whitespace-pre-wrap font-mono">
                          {vulnerability.attackValue}
                        </pre>
                      ) : (
                        <span className="text-muted-foreground">No attack value specified</span>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Description */}
            <div className="bg-card rounded-xl border border-border overflow-hidden">
              <div className="p-6 border-b border-border">
                <h3 className="text-lg font-semibold text-card-foreground">Description</h3>
              </div>
              <div className="p-6">
                {isEditing ? (
                  <RichTextEditor
                    value={editData.description}
                    onChange={(value) => setEditData(prev => ({ ...prev, description: value }))}
                    placeholder="Describe the vulnerability in detail..."
                    height={250}
                  />
                ) : (
                  <div 
                    className="prose prose-sm max-w-none dark:prose-invert min-h-[100px]"
                    dangerouslySetInnerHTML={{ 
                      __html: vulnerability.description || '<p class="text-muted-foreground">No description provided.</p>' 
                    }}
                  />
                )}
              </div>
            </div>

            {/* Impact */}
            <div className="bg-card rounded-xl border border-border overflow-hidden">
              <div className="p-6 border-b border-border">
                <h3 className="text-lg font-semibold text-card-foreground">Impact</h3>
              </div>
              <div className="p-6">
                {isEditing ? (
                  <RichTextEditor
                    value={editData.impact}
                    onChange={(value) => setEditData(prev => ({ ...prev, impact: value }))}
                    placeholder="Describe the potential impact..."
                    height={250}
                  />
                ) : (
                  <div 
                    className="prose prose-sm max-w-none dark:prose-invert min-h-[100px]"
                    dangerouslySetInnerHTML={{ 
                      __html: vulnerability.impact || '<p class="text-muted-foreground">No impact information provided.</p>' 
                    }}
                  />
                )}
              </div>
            </div>

            {/* Recommendation */}
            <div className="bg-card rounded-xl border border-border overflow-hidden">
              <div className="p-6 border-b border-border">
                <h3 className="text-lg font-semibold text-card-foreground">Recommendation</h3>
              </div>
              <div className="p-6">
                {isEditing ? (
                  <RichTextEditor
                    value={editData.recommendation}
                    onChange={(value) => setEditData(prev => ({ ...prev, recommendation: value }))}
                    placeholder="Provide remediation steps..."
                    height={250}
                  />
                ) : (
                  <div 
                    className="prose prose-sm max-w-none dark:prose-invert min-h-[100px]"
                    dangerouslySetInnerHTML={{ 
                      __html: vulnerability.recommendation || '<p class="text-muted-foreground">No recommendations provided.</p>' 
                    }}
                  />
                )}
              </div>
            </div>
          </div>

          {/* Sidebar - 1 column */}
          <div className="space-y-6">
            {/* Attachments with Enhanced Image Gallery */}
            <div className="bg-card rounded-xl border border-border overflow-hidden">
              <div className="p-6 border-b border-border flex items-center justify-between">
                <h3 className="text-lg font-semibold text-card-foreground">Attachments</h3>
                <label className="cursor-pointer">
                  <input
                    type="file"
                    multiple
                    onChange={handleFileUpload}
                    className="hidden"
                    disabled={isUploading}
                    accept="image/*,.pdf,.doc,.docx,.txt"
                  />
                  <div className="inline-flex items-center gap-2 px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors text-sm font-medium">
                    <UploadIcon />
                    {isUploading ? 'Uploading...' : 'Upload'}
                  </div>
                </label>
              </div>
              
              <div className="p-6">
                {uploads.length === 0 ? (
                  <div className="text-center py-8">
                    <FileIcon className="w-12 h-12 text-muted-foreground mx-auto mb-3" />
                    <p className="text-sm text-muted-foreground">No attachments uploaded.</p>
                  </div>
                ) : (
                  <div className="space-y-6">
                    {/* Enhanced Image Gallery */}
                    {imageFiles.length > 0 && (
                      <ImageGallery
                        images={imageFiles}
                        onImageClick={openImagePreview}
                        onDeleteClick={openDeleteDialog}
                      />
                    )}
                    
                    {/* Other Files */}
                    {otherFiles.length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-card-foreground mb-3">Other Files ({otherFiles.length})</h4>
                        <div className="space-y-2">
                          {otherFiles.map((upload) => {
                            const displayName = upload.caption || upload.filename || 'Unknown file';
                            return (
                              <div key={upload._id} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg border hover:bg-muted/50 transition-colors">
                                <div className="flex items-center gap-3 flex-1 min-w-0">
                                  <FileIcon className="text-muted-foreground flex-shrink-0" />
                                  <div className="min-w-0">
                                    <p className="text-sm text-card-foreground truncate">
                                      {displayName}
                                    </p>
                                    <p className="text-xs text-muted-foreground">
                                      {formatFileSize(upload.size || 0)}
                                    </p>
                                  </div>
                                </div>
                                
                                <button
                                  onClick={() => openDeleteDialog(upload._id, displayName)}
                                  className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors"
                                  title="Delete file"
                                >
                                  <TrashIcon />
                                </button>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* Additional Information */}
            <div className="bg-card rounded-xl border border-border p-6">
              <h3 className="text-lg font-semibold text-card-foreground mb-4">Additional Information</h3>
              <div className="space-y-4">
                {vulnerability.updatedAt && (
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Last Updated</p>
                    <p className="text-sm text-card-foreground mt-1">
                      {new Date(vulnerability.updatedAt).toLocaleString()}
                    </p>
                  </div>
                )}
                
                {vulnerability.owaspFamily && (
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">OWASP Category</p>
                    <p className="text-sm text-card-foreground mt-1">{vulnerability.owaspFamily}</p>
                  </div>
                )}
                
                {vulnerability.cwe && (
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">CWE ID</p>
                    <p className="text-sm text-card-foreground mt-1">{vulnerability.cwe}</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* âœ… FIXED: Image Viewer Modal with proper state handling */}
      {viewingImage && (
        <ImageViewerModal 
          imageUrl={viewingImage} 
          onClose={() => {
            console.log('Closing image viewer'); // Debug log
            setViewingImage(null);
          }} 
        />
      )}

      {/* Custom Delete Confirmation Dialog */}
      <DeleteConfirmationDialog
        isOpen={isDeleteDialogOpen}
        onClose={closeDeleteDialog}
        onConfirm={confirmDelete}
        fileName={deleteTargetName}
        isDeleting={isDeleting}
      />
    </div>
  );
};

export default VulnerabilityInstanceDetailsPage;
