// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstancesPage.jsx (UPDATED)
// PURPOSE: Displays vulnerability instances for a specific vulnerability with theme support.
// =======================================================================
import { useState, useEffect, useMemo } from 'react';
import { useParams, useSearchParams, Link, useNavigate } from 'react-router-dom';
import { getVulnerabilityInstances } from '../../api/vulnerabilityApi';
import toast from 'react-hot-toast';
import DataTable from '../../components/DataTable';
import Spinner from '../../components/Spinner';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

// Icons
const EyeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const BugIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const ArrowLeftIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const UserIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
  </svg>
);

const LinkIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
);

const CalendarIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const VulnerabilityInstancesPage = () => {
  const { vulnName } = useParams();
  const [searchParams] = useSearchParams();
  const projectName = searchParams.get('projectName');
  const [instances, setInstances] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const { theme, color } = useTheme();
  const { user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (projectName && vulnName) {
      const fetchInstances = async () => {
        setIsLoading(true);
        try {
          const response = await getVulnerabilityInstances(projectName, vulnName);
          setInstances(response.data || []);
        } catch (error) {
          console.error('Error fetching vulnerability instances:', error);
          toast.error(error.message || 'Failed to load vulnerability instances');
        } finally {
          setIsLoading(false);
        }
      };
      fetchInstances();
    } else {
      setIsLoading(false);
      toast.error('Missing project name or vulnerability name');
    }
  }, [projectName, vulnName]);

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Informational': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  // Statistics for the instances
  const statistics = useMemo(() => {
    const total = instances.length;
    const severityCounts = instances.reduce((acc, instance) => {
      acc[instance.severity] = (acc[instance.severity] || 0) + 1;
      return acc;
    }, {});

    return {
      total,
      critical: severityCounts['Critical'] || 0,
      high: severityCounts['High'] || 0,
      medium: severityCounts['Medium'] || 0,
      low: severityCounts['Low'] || 0,
      informational: severityCounts['Informational'] || 0
    };
  }, [instances]);

  const columns = useMemo(() => [
    { 
      accessorKey: 'vulnName', 
      header: 'Vulnerability Name',
      cell: ({ getValue }) => (
        <div className="flex items-center gap-2">
          <BugIcon className="w-4 h-4 text-primary flex-shrink-0" />
          <span className="font-medium text-card-foreground">
            {getValue() || 'Unnamed Vulnerability'}
          </span>
        </div>
      )
    },
    { 
      accessorKey: 'severity', 
      header: 'Severity',
      cell: ({ getValue }) => {
        const severity = getValue();
        if (!severity) return <span className="text-muted-foreground">Unknown</span>;
        
        return (
          <div className={`inline-flex items-center px-2 py-1 rounded-md text-xs font-medium border ${getSeverityColor(severity)}`}>
            <AlertTriangleIcon className="w-3 h-3 mr-1" />
            {severity}
          </div>
        );
      }
    },
    { 
      accessorKey: 'affectedUrl', 
      header: 'Affected URL',
      cell: ({ getValue }) => {
        const url = getValue();
        if (!url) return <span className="text-muted-foreground">Not specified</span>;
        
        return (
          <div className="flex items-center gap-2 max-w-md">
            <LinkIcon className="text-muted-foreground flex-shrink-0" />
            <a
              href={url}
              target="_blank"
              rel="noopener noreferrer"
              className="text-primary hover:text-primary/80 text-sm truncate hover:underline"
              title={url}
            >
              {url}
            </a>
          </div>
        );
      }
    },
    { 
      accessorKey: 'user_name', 
      header: 'Tester',
      cell: ({ getValue }) => {
        const testerName = getValue();
        if (!testerName) return <span className="text-muted-foreground">Unknown</span>;
        
        return (
          <div className="flex items-center gap-2">
            <UserIcon className="text-muted-foreground" />
            <span className="text-sm text-card-foreground">{testerName}</span>
          </div>
        );
      }
    },
    { 
      accessorKey: 'createdAt', 
      header: 'Created',
      cell: ({ getValue }) => {
        const date = getValue();
        if (!date) return <span className="text-muted-foreground">Unknown</span>;
        
        return (
          <div className="flex items-center gap-2">
            <CalendarIcon className="text-muted-foreground" />
            <span className="text-sm text-card-foreground">
              {new Date(date).toLocaleDateString()}
            </span>
          </div>
        );
      }
    },
    { 
      id: 'actions', 
      header: 'Actions',
      cell: ({ row }) => (
        <div className="flex items-center gap-1">
          <Link
            to={`/vulnerabilities/instance/${row.original._id}`}
            className="p-2 rounded-lg text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
            title="View Details"
          >
            <EyeIcon />
          </Link>
          {user?.role === 'admin' && (
            <button
              onClick={() => {
                // Add delete functionality here if needed
                toast.info('Delete functionality can be implemented here');
              }}
              className="p-2 rounded-lg text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
              title="Delete Instance"
            >
              <TrashIcon />
            </button>
          )}
        </div>
      )
    },
  ], [user?.role]);

  const handleBack = () => {
    navigate(-1);
  };

  return (
    <div className={`${theme} theme-${color} min-h-screen bg-background`}>
      <div className="max-w-7xl mx-auto py-8 px-4">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={handleBack}
            className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-6"
          >
            <ArrowLeftIcon />
            <span className="text-sm">Back</span>
          </button>
          
          <div className="flex items-center gap-4">
            <div className="p-3 bg-primary/10 rounded-xl">
              <BugIcon className="text-primary" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-card-foreground">
                Vulnerability Instances
              </h1>
              <div className="mt-2 space-y-1">
                <div className="text-lg font-medium text-card-foreground">
                  {decodeURIComponent(vulnName || 'Unknown Vulnerability')}
                </div>
                {projectName && (
                  <div className="text-sm text-muted-foreground">
                    Project: <span className="font-medium">{projectName}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Statistics Cards */}
        {instances.length > 0 && (
          <div className="grid grid-cols-2 md:grid-cols-6 gap-4 mb-8">
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">Total</p>
                <p className="text-xl font-bold text-card-foreground">{statistics.total}</p>
              </div>
            </div>
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">Critical</p>
                <p className="text-xl font-bold text-red-600">{statistics.critical}</p>
              </div>
            </div>
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">High</p>
                <p className="text-xl font-bold text-orange-600">{statistics.high}</p>
              </div>
            </div>
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">Medium</p>
                <p className="text-xl font-bold text-yellow-600">{statistics.medium}</p>
              </div>
            </div>
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">Low</p>
                <p className="text-xl font-bold text-green-600">{statistics.low}</p>
              </div>
            </div>
            <div className="bg-card rounded-xl border border-border p-4">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">Info</p>
                <p className="text-xl font-bold text-blue-600">{statistics.informational}</p>
              </div>
            </div>
          </div>
        )}

        {/* Instances Table */}
        <div className="bg-card rounded-xl shadow-sm border border-border overflow-hidden">
          {isLoading ? (
            <div className="p-8">
              <Spinner message="Loading vulnerability instances..." />
            </div>
          ) : instances.length === 0 ? (
            <div className="p-12 text-center">
              <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4">
                <BugIcon className="w-8 h-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold text-card-foreground mb-2">No Instances Found</h3>
              <p className="text-muted-foreground mb-4">
                No instances of this vulnerability were found for the selected project.
              </p>
              <div className="text-sm text-muted-foreground space-y-1">
                <p><strong>Vulnerability:</strong> {decodeURIComponent(vulnName || 'Unknown')}</p>
                {projectName && <p><strong>Project:</strong> {projectName}</p>}
              </div>
            </div>
          ) : (
            <DataTable 
              data={instances} 
              columns={columns} 
              title={`${decodeURIComponent(vulnName || 'Vulnerability')} Instances`}
            />
          )}
        </div>

        {/* Instance Summary */}
        {instances.length > 0 && (
          <div className="mt-8 p-6 bg-muted/30 border border-border rounded-lg">
            <h3 className="text-lg font-semibold text-card-foreground mb-4 flex items-center gap-2">
              <BugIcon />
              Instance Summary
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm text-muted-foreground">
              <div>
                <h4 className="font-medium text-card-foreground mb-2">About Vulnerability Instances</h4>
                <p>
                  Each instance represents a specific occurrence of this vulnerability type 
                  found during the penetration test. Instances may have different severity 
                  levels and affect different parts of the application.
                </p>
              </div>
              <div>
                <h4 className="font-medium text-card-foreground mb-2">Next Steps</h4>
                <ul className="list-disc list-inside space-y-1">
                  <li>Review each instance for specific details and evidence</li>
                  <li>Prioritize remediation based on severity levels</li>
                  <li>Track remediation progress for each instance</li>
                  <li>Verify fixes before marking instances as resolved</li>
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityInstancesPage;
