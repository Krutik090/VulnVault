
// =======================================================================
// FILE: src/features/vulnerabilities/VulnerabilityInstancesPage.jsx (UPDATED)
// =======================================================================
import { useState, useEffect, useMemo } from 'react';
import { useParams, useSearchParams, Link } from 'react-router-dom';
import { getVulnerabilityInstances } from '../../api/vulnerabilityApi';
import toast from 'react-hot-toast';
import DataTable from '../../components/DataTable';
import Spinner from '../../components/Spinner';

const EyeIcon = () => <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>;
const TrashIcon = () => <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>;

const VulnerabilityInstancesPage = () => {
    const { vulnName } = useParams();
    const [searchParams] = useSearchParams();
    const projectName = searchParams.get('projectName');
    
    const [instances, setInstances] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        if (projectName && vulnName) {
            const fetchInstances = async () => {
                setIsLoading(true);
                try {
                    const response = await getVulnerabilityInstances(projectName, vulnName);
                    setInstances(response.data);
                } catch (error) {
                    toast.error(error.message);
                } finally {
                    setIsLoading(false);
                }
            };
            fetchInstances();
        }
    }, [projectName, vulnName]);

    const columns = useMemo(() => [
        { accessorKey: 'vulnName', header: 'Vulnerability Name' },
        { accessorKey: 'severity', header: 'Severity', /* ... */ },
        { accessorKey: 'affectedUrl', header: 'Affected URL' },
        { accessorKey: 'user_name', header: 'Tester' },
        { id: 'actions', header: 'Actions', cell: ({ row }) => (
            <div className="flex items-center space-x-2">
                <Link to={`/project-vulnerabilities/${row.original._id}`} className="p-2 rounded-full text-blue-500 hover:bg-blue-100" title="View Details"><EyeIcon /></Link>
                <button className="p-2 rounded-full text-red-500 hover:bg-red-100" title="Delete Instance"><TrashIcon /></button>
            </div>
        )},
    ], []);

    return (
        <div className="bg-white shadow rounded-lg">
            <div className="p-6 border-b">
                <h1 className="text-2xl font-bold text-gray-800">{projectName} Vulnerabilities</h1>
                <p className="text-gray-500 mt-1">Showing all instances of: <strong>{vulnName}</strong></p>
            </div>
            {isLoading ? <Spinner /> : <DataTable data={instances} columns={columns} />}
        </div>
    );
};

export default VulnerabilityInstancesPage;