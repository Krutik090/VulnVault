// =======================================================================
// FILE: src/features/projects/AddVulnerabilityPage.jsx (COMPLETE & ALIGNED)
// PURPOSE: Fully aligned with projectVulnerability.model.js
// =======================================================================

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor';
import FormInput from '../../components/FormInput';
import FormSelect from '../../components/FormSelect';
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import { addProjectVulnerability } from '../../api/projectVulnerabilitiesApi';
import { getProjectById } from '../../api/projectApi';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';

// Icons
const ArrowLeftIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const BugIcon = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

const ImageIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const AddVulnerabilityPage = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const { theme, color } = useTheme();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [project, setProject] = useState(null);
  const [vulnerabilityDatabase, setVulnerabilityDatabase] = useState([]);
  const [selectedVulnId, setSelectedVulnId] = useState('');

  // ✅ ALIGNED WITH MODEL SCHEMA
  const [formData, setFormData] = useState({
    project_name: '',           // ✅ Matches model
    vulnerability_name: '',     // ✅ Matches model
    appendName: '',             // ✅ Matches model
    severity: 'Medium',         // ✅ Matches model
    cvss_score: '',             // ✅ Matches model
    status: 'open',             // ✅ Matches model
    affected_url: '',           // ✅ Matches model
    affected_parameter: '',     // ✅ Matches model
    attack_value: '',           // ✅ Matches model
    cwe: '',                    // ✅ Matches model
    owasp_family: '',           // ✅ Matches model
    description: '',            // ✅ Matches model
    impact: '',                 // ✅ Matches model
    recommendation: '',         // ✅ Matches model
    poc: '',                    // ✅ Matches model
    references: '',             // ✅ Matches model
    across_the_app: false,      // ✅ Matches model
  });

  const [images, setImages] = useState([]);
  const [imageCaptions, setImageCaptions] = useState({});

  const severityOptions = [
    { value: 'Critical', label: 'Critical' },
    { value: 'High', label: 'High' },
    { value: 'Medium', label: 'Medium' },
    { value: 'Low', label: 'Low' },
    { value: 'Info', label: 'Info' },
  ];

  const statusOptions = [
    { value: 'open', label: 'Open' },
    { value: 'close', label: 'Close' },
    { value: 'not_in_scope', label: 'Not in Scope' },
    { value: 'obsolete', label: 'Obsolete' },
    { value: 'unable_to_verify', label: 'Unable to Verify' },
  ];

  useEffect(() => {
    fetchData();
  }, [projectId]);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [projectResponse, vulnDbResponse] = await Promise.all([
        getProjectById(projectId),
        getVulnerabilityDatabase()
      ]);

      const projectData = projectResponse.data || projectResponse;
      setProject(projectData);

      const vulnDb = vulnDbResponse.data || vulnDbResponse || [];
      setVulnerabilityDatabase(Array.isArray(vulnDb) ? vulnDb : []);

      setFormData(prev => ({
        ...prev,
        project_name: projectData.project_name || ''
      }));
    } catch (error) {
      console.error('Error fetching data:', error);
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const handleVulnSelect = useCallback((vulnId) => {
    setSelectedVulnId(vulnId);

    if (!vulnId) {
      setFormData(prev => ({
        ...prev,
        vulnerability_name: '',
        severity: 'Medium',
        cwe: '',
        owasp_family: '',
        description: '',
        impact: '',
        recommendation: '',
        poc: '',
        references: ''
      }));
      return;
    }

    const selectedVuln = vulnerabilityDatabase.find(v => v._id === vulnId);
    if (selectedVuln) {
      // ✅ Map from Vulnerability DB schema to ProjectVulnerability schema
      setFormData(prev => ({
        ...prev,
        vulnerability_name: selectedVuln.vulnName || '',
        severity: selectedVuln.severity || 'Medium',
        cwe: selectedVuln.cwe || '',
        owasp_family: selectedVuln.owaspFamily || '',
        description: selectedVuln.description || '',
        impact: selectedVuln.impact || '',
        recommendation: selectedVuln.recommendation || '',
        poc: selectedVuln.poc || '',
        references: selectedVuln.references || '',
      }));
      toast.success('Vulnerability details loaded from database');
    }
  }, [vulnerabilityDatabase]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleRichTextChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);

    if (images.length + files.length > 10) {
      toast.error('Maximum 10 images allowed');
      return;
    }

    const validFiles = files.filter(file => {
      if (!file.type.startsWith('image/')) {
        toast.error(`${file.name} is not an image`);
        return false;
      }
      if (file.size > 5 * 1024 * 1024) {
        toast.error(`${file.name} exceeds 5MB`);
        return false;
      }
      return true;
    });

    const newImages = [...images, ...validFiles];
    setImages(newImages);

    const newCaptions = { ...imageCaptions };
    validFiles.forEach((file, index) => {
      const imageIndex = images.length + index;
      newCaptions[imageIndex] = '';
    });
    setImageCaptions(newCaptions);
  };

  const handleRemoveImage = (index) => {
    const newImages = images.filter((_, i) => i !== index);
    setImages(newImages);

    const newCaptions = {};
    newImages.forEach((_, i) => {
      newCaptions[i] = imageCaptions[i > index ? i + 1 : i];
    });
    setImageCaptions(newCaptions);
  };

  const handleCaptionChange = (index, caption) => {
    setImageCaptions(prev => ({
      ...prev,
      [index]: caption
    }));
  };

  const validateForm = () => {
    if (!formData.vulnerability_name.trim()) {
      toast.error('Vulnerability name is required');
      return false;
    }

    if (!formData.severity) {
      toast.error('Severity is required');
      return false;
    }

    if (!formData.description || formData.description.trim() === '<p></p>' || !formData.description.trim()) {
      toast.error('Description is required');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;

    setSaving(true);
    try {
      const formDataToSend = new FormData();

      // ✅ CRITICAL FIX: Append each field individually with proper conversion
      formDataToSend.append('project_name', formData.project_name);
      formDataToSend.append('vulnerability_name', formData.vulnerability_name);

      if (formData.appendName) {
        formDataToSend.append('appendName', formData.appendName);
      }

      // ✅ FIX: Ensure severity is a string, not an object
      formDataToSend.append('severity', String(formData.severity));

      if (formData.cvss_score) {
        formDataToSend.append('cvss_score', formData.cvss_score);
      }

      formDataToSend.append('description', formData.description);

      if (formData.impact) {
        formDataToSend.append('impact', formData.impact);
      }

      if (formData.recommendation) {
        formDataToSend.append('recommendation', formData.recommendation);
      }

      if (formData.poc) {
        formDataToSend.append('poc', formData.poc);
      }

      if (formData.references) {
        formDataToSend.append('references', formData.references);
      }

      if (formData.owasp_family) {
        formDataToSend.append('owasp_family', formData.owasp_family);
      }

      if (formData.cwe) {
        formDataToSend.append('cwe', formData.cwe);
      }

      if (formData.affected_url) {
        formDataToSend.append('affected_url', formData.affected_url);
      }

      if (formData.affected_parameter) {
        formDataToSend.append('affected_parameter', formData.affected_parameter);
      }

      if (formData.attack_value) {
        formDataToSend.append('attack_value', formData.attack_value);
      }

      // ✅ FIX: Ensure status is a string
      formDataToSend.append('status', String(formData.status));

      // ✅ FIX: Convert boolean to string explicitly
      formDataToSend.append('across_the_app', String(formData.across_the_app));

      // ✅ Add found_by (required by model)
      formDataToSend.append('found_by', user?.name || 'Unknown');

      // ✅ Add vulnId if vulnerability was selected from database
      if (selectedVulnId) {
        formDataToSend.append('vulnId', selectedVulnId);
      }

      // ✅ Append images
      images.forEach((image) => {
        formDataToSend.append('images', image);
      });

      // ✅ Append image captions as JSON array
      formDataToSend.append('imageCaptions', JSON.stringify(
        images.map((_, index) => imageCaptions[index] || '')
      ));

      // ✅ DEBUG: Log FormData contents
      console.log('=== FORM DATA ENTRIES ===');
      for (let [key, value] of formDataToSend.entries()) {
        if (value instanceof File) {
          console.log(`${key}: [File] ${value.name}`);
        } else {
          console.log(`${key}:`, value, `(type: ${typeof value})`);
        }
      }

      // ✅ Send to API
      await addProjectVulnerability(projectId, formDataToSend);

      toast.success('Vulnerability added successfully!');
      navigate(`/projects/${projectId}`);
    } catch (error) {
      console.error('Error adding vulnerability:', error);
      toast.error(error.message || 'Failed to add vulnerability');
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    navigate(`/projects/${projectId}`);
  };

  const vulnOptions = useMemo(() => [
    { value: '', label: 'Select from database or create new...' },
    ...vulnerabilityDatabase.map(vuln => ({
      value: vuln._id,
      label: `${vuln.vulnName || 'Unnamed'}`
    }))
  ], [vulnerabilityDatabase]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Spinner size="large" />
      </div>
    );
  }

  return (
    <div className={`${theme} theme-${color} space-y-6`}>
      {/* Header */}
      <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent border border-border rounded-lg p-6">
        <button
          onClick={handleCancel}
          className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-4 text-sm"
        >
          <ArrowLeftIcon />
          Back to Project
        </button>

        <div className="flex items-center gap-4">
          <div className="p-4 bg-primary/10 rounded-2xl">
            <BugIcon />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-foreground">Add Vulnerability</h1>
            <p className="text-muted-foreground mt-1">{project?.project_name} Project</p>
          </div>
        </div>
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Vulnerability Selection */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">Vulnerability Selection</h2>
          <div className="space-y-5">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Select from Database <span className="text-muted-foreground text-xs">(Optional)</span>
              </label>
              <SearchableDropdown
                options={vulnOptions}
                value={selectedVulnId}
                onChange={handleVulnSelect}
                placeholder="Search vulnerability database..."
                className="w-full"
              />
              <p className="mt-2 text-xs text-muted-foreground">
                Select a vulnerability from the database to auto-fill fields, or enter manually below
              </p>
            </div>
          </div>
        </div>

        {/* Basic Information */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">Basic Information</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
            <div className="md:col-span-2">
              <FormInput
                label="Vulnerability Name"
                name="vulnerability_name"
                value={formData.vulnerability_name}
                onChange={handleChange}
                placeholder="Enter vulnerability name"
                required
              />
            </div>

            <FormInput
              label="Append Name"
              name="appendName"
              value={formData.appendName}
              onChange={handleChange}
              placeholder="Additional identifier (optional)"
            />

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Severity <span className="text-red-500">*</span>
              </label>
              <select
                name="severity"
                value={formData.severity}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-colors"
                required
              >
                <option value="Critical">Critical</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
                <option value="Info">Info</option>
              </select>
            </div>

            <FormInput
              label="CVSS Score"
              name="cvss_score"
              value={formData.cvss_score}
              onChange={handleChange}
              placeholder="e.g., 7.5"
              type="number"
              step="0.1"
              min="0"
              max="10"
            />

            <FormInput
              label="CWE"
              name="cwe"
              value={formData.cwe}
              onChange={handleChange}
              placeholder="e.g., CWE-79"
            />

            <FormInput
              label="OWASP Family"
              name="owasp_family"
              value={formData.owasp_family}
              onChange={handleChange}
              placeholder="e.g., A03:2021-Injection"
            />

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Status <span className="text-red-500">*</span>
              </label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-colors"
                required
              >
                <option value="open">Open</option>
                <option value="close">Close</option>
                <option value="not_in_scope">Not in Scope</option>
                <option value="obsolete">Obsolete</option>
                <option value="unable_to_verify">Unable to Verify</option>
              </select>
            </div>

            <FormInput
              label="Affected URL"
              name="affected_url"
              value={formData.affected_url}
              onChange={handleChange}
              placeholder="https://example.com/page"
            />

            <FormInput
              label="Affected Parameter"
              name="affected_parameter"
              value={formData.affected_parameter}
              onChange={handleChange}
              placeholder="e.g., id, username"
            />

            <div className="md:col-span-2">
              <FormInput
                label="Attack Value / Payload"
                name="attack_value"
                value={formData.attack_value}
                onChange={handleChange}
                placeholder="Enter the attack payload or value used..."
              />
            </div>

            <div className="md:col-span-2">
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  name="across_the_app"
                  checked={formData.across_the_app}
                  onChange={handleChange}
                  className="w-4 h-4 text-primary bg-background border-input rounded focus:ring-primary"
                />
                <span className="text-sm text-foreground">
                  This vulnerability affects the entire application
                </span>
              </label>
            </div>
          </div>
        </div>

        {/* Detailed Information */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">Detailed Information</h2>
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Description <span className="text-red-500">*</span>
              </label>
              <RichTextEditor
                value={formData.description}
                onChange={(value) => handleRichTextChange('description', value)}
                placeholder="Describe the vulnerability..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Impact
              </label>
              <RichTextEditor
                value={formData.impact}
                onChange={(value) => handleRichTextChange('impact', value)}
                placeholder="Describe the potential impact..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Recommendation
              </label>
              <RichTextEditor
                value={formData.recommendation}
                onChange={(value) => handleRichTextChange('recommendation', value)}
                placeholder="Provide remediation recommendations..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Proof of Concept
              </label>
              <RichTextEditor
                value={formData.poc}
                onChange={(value) => handleRichTextChange('poc', value)}
                placeholder="Provide proof of concept..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                References
              </label>
              <textarea
                name="references"
                value={formData.references}
                onChange={handleChange}
                rows={4}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-none"
                placeholder="Add reference links (one per line)"
              />
            </div>
          </div>
        </div>

        {/* Evidence/Screenshots */}
        <div className="bg-card border border-border rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-semibold text-foreground">Evidence & Screenshots</h2>
              <p className="text-sm text-muted-foreground mt-1">
                Upload images as proof (Max 10 images, 5MB each)
              </p>
            </div>
            <label className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors cursor-pointer font-medium">
              <ImageIcon />
              Upload Images
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={handleImageUpload}
                className="hidden"
              />
            </label>
          </div>

          {images.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {images.map((image, index) => (
                <div key={index} className="border border-border rounded-lg p-4 bg-muted/30">
                  <div className="relative group">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Evidence ${index + 1}`}
                      className="w-full h-48 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => handleRemoveImage(index)}
                      className="absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors opacity-0 group-hover:opacity-100"
                    >
                      <TrashIcon />
                    </button>
                  </div>
                  <div className="mt-3">
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Caption for Image {index + 1}
                    </label>
                    <input
                      type="text"
                      value={imageCaptions[index] || ''}
                      onChange={(e) => handleCaptionChange(index, e.target.value)}
                      placeholder="Add image caption..."
                      className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary text-sm"
                    />
                  </div>
                  <p className="mt-2 text-xs text-muted-foreground">
                    {image.name} ({(image.size / 1024 / 1024).toFixed(2)} MB)
                  </p>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12 border-2 border-dashed border-border rounded-lg">
              <ImageIcon className="w-12 h-12 text-muted-foreground mx-auto mb-3 opacity-50" />
              <p className="text-muted-foreground">No images uploaded yet</p>
              <p className="text-sm text-muted-foreground mt-1">Click "Upload Images" to add evidence</p>
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex items-center justify-end gap-4 pt-4">
          <button
            type="button"
            onClick={handleCancel}
            disabled={saving}
            className="px-6 py-3 border border-input text-foreground bg-background hover:bg-accent rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Cancel
          </button>

          <button
            type="submit"
            disabled={saving}
            className="inline-flex items-center gap-2 px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {saving ? (
              <>
                <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
                Adding Vulnerability...
              </>
            ) : (
              <>
                <SaveIcon />
                Add Vulnerability
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddVulnerabilityPage;
