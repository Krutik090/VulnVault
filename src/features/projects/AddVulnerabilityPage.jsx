// =======================================================================
// FILE: src/features/projects/AddVulnerabilityPage.jsx (UPDATED)
// PURPOSE: Fully aligned with projectVulnerability.model.js
// SOC 2 NOTES: Centralized icon management, secure form handling, input validation
// =======================================================================

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor';
import FormInput from '../../components/FormInput';
import FormSelect from '../../components/FormSelect';
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import { addProjectVulnerability } from '../../api/projectVulnerabilitiesApi';
import { getProjectById } from '../../api/projectApi';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import toast from 'react-hot-toast';
import Spinner from '../../components/Spinner';

// ✅ CENTRALIZED ICON IMPORTS (SOC 2: Single source of truth)
import {
  ArrowLeftIcon,
  SaveIcon,
  BugIcon,
  ImageIcon,
  TrashIcon,
} from '../../components/Icons';

const AddVulnerabilityPage = () => {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const { theme, color } = useTheme();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [project, setProject] = useState(null);
  const [vulnerabilityDatabase, setVulnerabilityDatabase] = useState([]);
  const [selectedVulnId, setSelectedVulnId] = useState('');

  // ✅ SOC 2: Form state aligned with projectVulnerability.model.js schema
  const [formData, setFormData] = useState({
    project_name: '',
    vulnerability_name: '',
    appendName: '',
    severity: 'Medium',
    cvss_score: '',
    status: 'open',
    affected_url: '',
    affected_parameter: '',
    attack_value: '',
    cwe: '',
    owasp_family: '',
    description: '',
    impact: '',
    recommendation: '',
    poc: '',
    references: '',
    across_the_app: false,
  });

  const [images, setImages] = useState([]);
  const [imageCaptions, setImageCaptions] = useState({});
  const [errors, setErrors] = useState({});

  // ✅ SOC 2: Predefined severity options
  const severityOptions = [
    { value: 'Critical', label: 'Critical' },
    { value: 'High', label: 'High' },
    { value: 'Medium', label: 'Medium' },
    { value: 'Low', label: 'Low' },
    { value: 'Info', label: 'Info' },
  ];

  // ✅ SOC 2: Predefined status options
  const statusOptions = [
    { value: 'open', label: 'Open' },
    { value: 'close', label: 'Close' },
    { value: 'not_in_scope', label: 'Not in Scope' },
    { value: 'obsolete', label: 'Obsolete' },
    { value: 'unable_to_verify', label: 'Unable to Verify' },
  ];

  useEffect(() => {
    fetchData();
  }, [projectId]);

  const fetchData = async () => {
    setLoading(true);
    try {
      // ✅ SOC 2: Parallel API calls for performance
      const [projectResponse, vulnDbResponse] = await Promise.all([
        getProjectById(projectId),
        getVulnerabilityDatabase()
      ]);

      // ✅ SOC 2: Input validation & sanitization
      const projectData = projectResponse.data || projectResponse;
      setProject(projectData);

      const vulnDb = vulnDbResponse.data || vulnDbResponse || [];
      setVulnerabilityDatabase(Array.isArray(vulnDb) ? vulnDb : []);

      setFormData((prev) => ({
        ...prev,
        project_name: projectData.project_name || ''
      }));
    } catch (error) {
      console.error('Failed to fetch data');
      toast.error('Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  const handleVulnSelect = useCallback((vulnId) => {
    setSelectedVulnId(vulnId);

    if (!vulnId) {
      setFormData((prev) => ({
        ...prev,
        vulnerability_name: '',
        severity: 'Medium',
        cwe: '',
        owasp_family: '',
        description: '',
        impact: '',
        recommendation: '',
        poc: '',
        references: ''
      }));
      return;
    }

    // ✅ SOC 2: Safe vulnerability selection from database
    const selectedVuln = vulnerabilityDatabase.find(
      (v) => v._id === vulnId
    );
    if (selectedVuln) {
      // Map from Vulnerability DB schema to ProjectVulnerability schema
      setFormData((prev) => ({
        ...prev,
        vulnerability_name: selectedVuln.vulnName || '',
        severity: selectedVuln.severity || 'Medium',
        cwe: selectedVuln.cwe || '',
        owasp_family: selectedVuln.owaspFamily || '',
        description: selectedVuln.description || '',
        impact: selectedVuln.impact || '',
        recommendation: selectedVuln.recommendation || '',
        poc: selectedVuln.poc || '',
        references: selectedVuln.references || '',
      }));
      setErrors({}); // Clear errors on successful selection
      toast.success('Vulnerability details loaded from database');
    }
  }, [vulnerabilityDatabase]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    // ✅ SOC 2: Clear error on field change
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  const handleRichTextChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: null }));
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);

    // ✅ SOC 2: Image count validation
    if (images.length + files.length > 10) {
      toast.error('Maximum 10 images allowed');
      return;
    }

    // ✅ SOC 2: File type and size validation
    const validFiles = files.filter((file) => {
      if (!file.type.startsWith('image/')) {
        toast.error(`${file.name} is not a valid image file`);
        return false;
      }
      if (file.size > 5 * 1024 * 1024) {
        toast.error(`${file.name} exceeds 5MB size limit`);
        return false;
      }
      return true;
    });

    const newImages = [...images, ...validFiles];
    setImages(newImages);

    // Initialize captions for new images
    const newCaptions = { ...imageCaptions };
    validFiles.forEach((_, index) => {
      const imageIndex = images.length + index;
      newCaptions[imageIndex] = '';
    });
    setImageCaptions(newCaptions);
  };

  const handleRemoveImage = (index) => {
    const newImages = images.filter((_, i) => i !== index);
    setImages(newImages);

    // ✅ SOC 2: Reindex captions after removal
    const newCaptions = {};
    newImages.forEach((_, i) => {
      newCaptions[i] = imageCaptions[i > index ? i + 1 : i];
    });
    setImageCaptions(newCaptions);
  };

  const handleCaptionChange = (index, caption) => {
    setImageCaptions((prev) => ({
      ...prev,
      [index]: caption
    }));
  };

  // ✅ SOC 2: Comprehensive form validation
  const validateForm = () => {
    const newErrors = {};

    if (!formData.vulnerability_name.trim()) {
      newErrors.vulnerability_name = 'Vulnerability name is required';
    } else if (formData.vulnerability_name.length < 3) {
      newErrors.vulnerability_name = 'Vulnerability name must be at least 3 characters';
    } else if (formData.vulnerability_name.length > 255) {
      newErrors.vulnerability_name = 'Vulnerability name must be less than 255 characters';
    }

    if (!formData.severity) {
      newErrors.severity = 'Severity level is required';
    }

    if (!formData.description || formData.description.trim() === '<p></p>' || !formData.description.trim()) {
      newErrors.description = 'Description is required';
    }

    if (formData.cvss_score) {
      const score = parseFloat(formData.cvss_score);
      if (isNaN(score) || score < 0 || score > 10) {
        newErrors.cvss_score = 'CVSS score must be between 0 and 10';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error('Please fix the errors below');
      return;
    }

    setSaving(true);
    try {
      // ✅ SOC 2: FormData for file upload
      const formDataToSend = new FormData();

      // ✅ SOC 2: Append required fields with proper sanitization
      formDataToSend.append('project_name', formData.project_name.trim());
      formDataToSend.append('vulnerability_name', formData.vulnerability_name.trim());

      if (formData.appendName.trim()) {
        formDataToSend.append('appendName', formData.appendName.trim());
      }

      // ✅ SOC 2: Ensure severity is a string
      formDataToSend.append('severity', String(formData.severity));

      if (formData.cvss_score) {
        formDataToSend.append('cvss_score', parseFloat(formData.cvss_score));
      }

      formDataToSend.append('description', formData.description.trim());

      if (formData.impact.trim()) {
        formDataToSend.append('impact', formData.impact.trim());
      }

      if (formData.recommendation.trim()) {
        formDataToSend.append('recommendation', formData.recommendation.trim());
      }

      if (formData.poc.trim()) {
        formDataToSend.append('poc', formData.poc.trim());
      }

      if (formData.references.trim()) {
        formDataToSend.append('references', formData.references.trim());
      }

      if (formData.owasp_family.trim()) {
        formDataToSend.append('owasp_family', formData.owasp_family.trim());
      }

      if (formData.cwe.trim()) {
        formDataToSend.append('cwe', formData.cwe.trim());
      }

      if (formData.affected_url.trim()) {
        formDataToSend.append('affected_url', formData.affected_url.trim());
      }

      if (formData.affected_parameter.trim()) {
        formDataToSend.append('affected_parameter', formData.affected_parameter.trim());
      }

      if (formData.attack_value.trim()) {
        formDataToSend.append('attack_value', formData.attack_value.trim());
      }

      // ✅ SOC 2: Ensure status is a string
      formDataToSend.append('status', String(formData.status));

      // ✅ SOC 2: Convert boolean to string
      formDataToSend.append('across_the_app', String(formData.across_the_app));

      // ✅ SOC 2: Add found_by (required by model)
      formDataToSend.append('found_by', user?.name || 'Unknown');

      // ✅ Add vulnId if vulnerability selected from database
      if (selectedVulnId) {
        formDataToSend.append('vulnId', selectedVulnId);
      }

      // ✅ SOC 2: Append images
      images.forEach((image) => {
        formDataToSend.append('images', image);
      });

      // ✅ SOC 2: Append image captions as JSON array
      formDataToSend.append('imageCaptions', JSON.stringify(
        images.map((_, index) => imageCaptions[index] || '')
      ));

      // ✅ Send to API
      await addProjectVulnerability(projectId, formDataToSend);

      toast.success('Vulnerability added successfully!');
      navigate(`/projects/${projectId}`);
    } catch (error) {
      console.error('Failed to add vulnerability');
      toast.error(error.message || 'Failed to add vulnerability');
    } finally {
      setSaving(false);
    }
  };

  const handleCancel = () => {
    navigate(`/projects/${projectId}`);
  };

  // ✅ SOC 2: Safe vulnerability options mapping
  const vulnOptions = useMemo(
    () => [
      { value: '', label: 'Select from database or create new...' },
      ...vulnerabilityDatabase.map((vuln) => ({
        value: vuln._id,
        label: `${vuln.vulnName || 'Unnamed Vulnerability'}`
      }))
    ],
    [vulnerabilityDatabase]
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Spinner size="large" />
      </div>
    );
  }

  return (
    <div className={`${theme} theme-${color} space-y-6`}>
      {/* ========== HEADER ========== */}
      <div className="bg-gradient-to-r from-primary/10 via-primary/5 to-transparent border border-border rounded-lg p-6">
        <button
          onClick={handleCancel}
          className="inline-flex items-center gap-2 text-muted-foreground hover:text-foreground transition-colors mb-4 text-sm"
          aria-label="Go back to project"
        >
          <ArrowLeftIcon className="w-5 h-5" />
          Back to Project
        </button>

        <div className="flex items-center gap-4">
          <div className="p-4 bg-primary/10 rounded-2xl">
            <BugIcon className="text-primary w-6 h-6" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-foreground">
              Add Vulnerability
            </h1>
            <p className="text-muted-foreground mt-1">
              {project?.project_name} Project
            </p>
          </div>
        </div>
      </div>

      {/* ========== FORM ========== */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* ========== VULNERABILITY SELECTION ========== */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">
            Vulnerability Selection
          </h2>
          <div className="space-y-5">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Select from Database{' '}
                <span className="text-muted-foreground text-xs">(Optional)</span>
              </label>
              <SearchableDropdown
                options={vulnOptions}
                value={selectedVulnId}
                onChange={handleVulnSelect}
                placeholder="Search vulnerability database..."
                className="w-full"
                aria-label="Select vulnerability from database"
              />
              <p className="mt-2 text-xs text-muted-foreground">
                Select a vulnerability from the database to auto-fill fields, or enter manually below
              </p>
            </div>
          </div>
        </div>

        {/* ========== BASIC INFORMATION ========== */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">
            Basic Information
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
            {/* Vulnerability Name */}
            <div className="md:col-span-2">
              <FormInput
                label="Vulnerability Name"
                name="vulnerability_name"
                value={formData.vulnerability_name}
                onChange={handleChange}
                placeholder="Enter vulnerability name"
                required
                maxLength={255}
                aria-label="Vulnerability name"
                aria-invalid={!!errors.vulnerability_name}
                error={errors.vulnerability_name}
              />
            </div>

            {/* Append Name */}
            <FormInput
              label="Append Name"
              name="appendName"
              value={formData.appendName}
              onChange={handleChange}
              placeholder="Additional identifier (optional)"
              aria-label="Append name"
            />

            {/* Severity */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Severity <span className="text-red-500">*</span>
              </label>
              <select
                name="severity"
                value={formData.severity}
                onChange={handleChange}
                className={`w-full px-4 py-3 border rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-colors ${
                  errors.severity ? 'border-red-500' : 'border-input'
                }`}
                required
                aria-label="Select severity level"
                aria-invalid={!!errors.severity}
              >
                <option value="Critical">Critical</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
                <option value="Info">Info</option>
              </select>
              {errors.severity && (
                <p className="mt-2 text-sm text-red-600">{errors.severity}</p>
              )}
            </div>

            {/* CVSS Score */}
            <FormInput
              label="CVSS Score"
              name="cvss_score"
              value={formData.cvss_score}
              onChange={handleChange}
              placeholder="e.g., 7.5"
              type="number"
              step="0.1"
              min="0"
              max="10"
              aria-label="CVSS score"
              error={errors.cvss_score}
            />

            {/* CWE */}
            <FormInput
              label="CWE"
              name="cwe"
              value={formData.cwe}
              onChange={handleChange}
              placeholder="e.g., CWE-79"
              aria-label="CWE identifier"
            />

            {/* OWASP Family */}
            <FormInput
              label="OWASP Family"
              name="owasp_family"
              value={formData.owasp_family}
              onChange={handleChange}
              placeholder="e.g., A03:2021-Injection"
              aria-label="OWASP family"
            />

            {/* Status */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Status <span className="text-red-500">*</span>
              </label>
              <select
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-colors"
                required
                aria-label="Select vulnerability status"
              >
                <option value="open">Open</option>
                <option value="close">Close</option>
                <option value="not_in_scope">Not in Scope</option>
                <option value="obsolete">Obsolete</option>
                <option value="unable_to_verify">Unable to Verify</option>
              </select>
            </div>

            {/* Affected URL */}
            <FormInput
              label="Affected URL"
              name="affected_url"
              value={formData.affected_url}
              onChange={handleChange}
              placeholder="https://example.com/page"
              aria-label="Affected URL"
            />

            {/* Affected Parameter */}
            <FormInput
              label="Affected Parameter"
              name="affected_parameter"
              value={formData.affected_parameter}
              onChange={handleChange}
              placeholder="e.g., id, username"
              aria-label="Affected parameter"
            />

            {/* Attack Value / Payload */}
            <div className="md:col-span-2">
              <FormInput
                label="Attack Value / Payload"
                name="attack_value"
                value={formData.attack_value}
                onChange={handleChange}
                placeholder="Enter the attack payload or value used..."
                aria-label="Attack value or payload"
              />
            </div>

            {/* Across the App Checkbox */}
            <div className="md:col-span-2">
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  name="across_the_app"
                  checked={formData.across_the_app}
                  onChange={handleChange}
                  className="w-4 h-4 text-primary bg-background border-input rounded focus:ring-primary"
                  aria-label="This vulnerability affects the entire application"
                />
                <span className="text-sm text-foreground">
                  This vulnerability affects the entire application
                </span>
              </label>
            </div>
          </div>
        </div>

        {/* ========== DETAILED INFORMATION ========== */}
        <div className="bg-card border border-border rounded-lg p-6">
          <h2 className="text-xl font-semibold text-foreground mb-6">
            Detailed Information
          </h2>
          <div className="space-y-6">
            {/* Description */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Description <span className="text-red-500">*</span>
              </label>
              <RichTextEditor
                value={formData.description}
                onChange={(value) =>
                  handleRichTextChange('description', value)
                }
                placeholder="Describe the vulnerability..."
                aria-label="Vulnerability description"
              />
              {errors.description && (
                <p className="mt-2 text-sm text-red-600">
                  {errors.description}
                </p>
              )}
            </div>

            {/* Impact */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Impact
              </label>
              <RichTextEditor
                value={formData.impact}
                onChange={(value) => handleRichTextChange('impact', value)}
                placeholder="Describe the potential impact..."
                aria-label="Vulnerability impact"
              />
            </div>

            {/* Recommendation */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Recommendation
              </label>
              <RichTextEditor
                value={formData.recommendation}
                onChange={(value) =>
                  handleRichTextChange('recommendation', value)
                }
                placeholder="Provide remediation recommendations..."
                aria-label="Remediation recommendation"
              />
            </div>

            {/* Proof of Concept */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Proof of Concept
              </label>
              <RichTextEditor
                value={formData.poc}
                onChange={(value) => handleRichTextChange('poc', value)}
                placeholder="Provide proof of concept..."
                aria-label="Proof of concept"
              />
            </div>

            {/* References */}
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                References
              </label>
              <textarea
                name="references"
                value={formData.references}
                onChange={handleChange}
                rows={4}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-none"
                placeholder="Add reference links (one per line)"
                aria-label="References and links"
              />
            </div>
          </div>
        </div>

        {/* ========== EVIDENCE/SCREENSHOTS ========== */}
        <div className="bg-card border border-border rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-xl font-semibold text-foreground">
                Evidence & Screenshots
              </h2>
              <p className="text-sm text-muted-foreground mt-1">
                Upload images as proof (Max 10 images, 5MB each)
              </p>
            </div>
            <label className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors cursor-pointer font-medium"
              aria-label="Upload images">
              <ImageIcon className="w-5 h-5" />
              Upload Images
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={handleImageUpload}
                className="hidden"
                aria-label="Image file input"
              />
            </label>
          </div>

          {images.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {images.map((image, index) => (
                <div
                  key={index}
                  className="border border-border rounded-lg p-4 bg-muted/30"
                >
                  <div className="relative group">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Evidence ${index + 1}`}
                      className="w-full h-48 object-cover rounded-lg"
                    />
                    <button
                      type="button"
                      onClick={() => handleRemoveImage(index)}
                      className="absolute top-2 right-2 p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors opacity-0 group-hover:opacity-100"
                      aria-label={`Remove image ${index + 1}`}
                    >
                      <TrashIcon className="w-4 h-4" />
                    </button>
                  </div>
                  <div className="mt-3">
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Caption for Image {index + 1}
                    </label>
                    <input
                      type="text"
                      value={imageCaptions[index] || ''}
                      onChange={(e) =>
                        handleCaptionChange(index, e.target.value)
                      }
                      placeholder="Add image caption..."
                      className="w-full px-3 py-2 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary text-sm"
                      aria-label={`Caption for image ${index + 1}`}
                    />
                  </div>
                  <p className="mt-2 text-xs text-muted-foreground">
                    {image.name} ({(image.size / 1024 / 1024).toFixed(2)} MB)
                  </p>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12 border-2 border-dashed border-border rounded-lg">
              <ImageIcon className="w-12 h-12 text-muted-foreground mx-auto mb-3 opacity-50" />
              <p className="text-muted-foreground">No images uploaded yet</p>
              <p className="text-sm text-muted-foreground mt-1">
                Click "Upload Images" to add evidence
              </p>
            </div>
          )}
        </div>

        {/* ========== ACTION BUTTONS ========== */}
        <div className="flex items-center justify-end gap-4 pt-4">
          <button
            type="button"
            onClick={handleCancel}
            disabled={saving}
            className="px-6 py-3 border border-input text-foreground bg-background hover:bg-accent rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Cancel and go back"
          >
            Cancel
          </button>

          <button
            type="submit"
            disabled={saving}
            className="inline-flex items-center gap-2 px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Add vulnerability"
          >
            {saving ? (
              <>
                <div className="w-5 h-5 border-2 border-current border-t-transparent rounded-full animate-spin" />
                Adding Vulnerability...
              </>
            ) : (
              <>
                <SaveIcon className="w-5 h-5" />
                Add Vulnerability
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddVulnerabilityPage;
