// =======================================================================
// FILE: src/features/projects/AddVulnerabilityModal.jsx (UPDATED)
// PURPOSE: A modal for adding a new vulnerability instance to a project.
// =======================================================================
import { useState, useEffect } from 'react';
import Modal from '../../components/Modal';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor'; // Import the new component
import { getVulnerabilityDatabase, addProjectVulnerability } from '../../api/vulnerabilityApi';
import { useAuth } from '../../contexts/AuthContext';
import toast from 'react-hot-toast';

const initialFormState = {
    severity: 'Medium',
    vulnName: '',
    description: '',
    impact: '',
    recommendation: '',
    owaspFamily: '',
    cwe: '',
    affectedUrl: '',
    affectedParameter: '',
    attackValue: '',
};

const AddVulnerabilityModal = ({ isOpen, onClose, onSave, project }) => {
    const { user } = useAuth();
    const [formData, setFormData] = useState(initialFormState);
    const [predefinedVulns, setPredefinedVulns] = useState([]);
    const [isManualEntry, setIsManualEntry] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [selectedFiles, setSelectedFiles] = useState([]);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await getVulnerabilityDatabase();
                setPredefinedVulns(response.data);
            } catch (error) {
                toast.error("Could not load vulnerability database.");
            }
        };
        if (isOpen) {
            setFormData(initialFormState);
            setSelectedFiles([]);
            setIsManualEntry(false);
            fetchData();
        }
    }, [isOpen]);

    const handleVulnNameChange = (vulnName) => {
        const selectedVuln = predefinedVulns.find(v => v.vulnName === vulnName);
        if (selectedVuln) {
            setFormData(prev => ({
                ...prev,
                vulnName: selectedVuln.vulnName,
                description: selectedVuln.description,
                impact: selectedVuln.impact,
                recommendation: selectedVuln.recommendation,
                owaspFamily: selectedVuln.owaspFamily,
                cwe: selectedVuln.cwe,
            }));
        } else {
             setFormData(prev => ({ ...prev, vulnName }));
        }
    };

    const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
    const handleEditorChange = (field, data) => setFormData(prev => ({ ...prev, [field]: data }));
    const handleFileChange = (e) => setSelectedFiles(Array.from(e.target.files));

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSaving(true);

        const submissionData = new FormData();
        for (const key in formData) {
            submissionData.append(key, formData[key]);
        }
        submissionData.append('projectId', project._id);
        submissionData.append('user_name', user.name);

        selectedFiles.forEach((file) => submissionData.append('uploads', file));

        try {
            await addProjectVulnerability(project._id, submissionData);
            toast.success("Vulnerability added successfully!");
            onSave();
        } catch (error) {
            toast.error(error.message);
        } finally {
            setIsSaving(false);
        }
    };

    const vulnOptions = predefinedVulns
        .filter(v => v && v.vulnName)
        .map(v => ({ value: v.vulnName, label: v.vulnName }));

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Add Vulnerability to ${project?.project_name}`} size="3xl">
            <form onSubmit={handleSubmit}>
                <div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-6 max-h-[70vh] overflow-y-auto">
                    {/* Column 1 */}
                    <div className="space-y-4">
                        {isManualEntry ? (
                            <FormInput label="Vulnerability Name" name="vulnName" value={formData.vulnName} onChange={handleChange} required />
                        ) : (
                            <SearchableDropdown label="Vulnerability Name" options={vulnOptions} value={formData.vulnName} onChange={handleVulnNameChange} placeholder="Search or select a vulnerability..." />
                        )}
                         <div className="flex items-center">
                            <input type="checkbox" id="manualEntry" checked={isManualEntry} onChange={(e) => setIsManualEntry(e.target.checked)} className="h-4 w-4 text-pink-600 border-gray-300 rounded" />
                            <label htmlFor="manualEntry" className="ml-2 block text-sm text-gray-900">Manual Entry</label>
                        </div>
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-1">Severity</label>
                            <select name="severity" value={formData.severity} onChange={handleChange} className="w-full p-2 border rounded">
                                <option>Medium</option><option>Critical</option><option>High</option><option>Low</option><option>Info</option>
                            </select>
                        </div>
                        <RichTextEditor label="Description" value={formData.description} onChange={(data) => handleEditorChange('description', data)} />
                        <RichTextEditor label="Impact" value={formData.impact} onChange={(data) => handleEditorChange('impact', data)} />
                    </div>
                    {/* Column 2 */}
                    <div className="space-y-4">
                        <RichTextEditor label="Recommendation" value={formData.recommendation} onChange={(data) => handleEditorChange('recommendation', data)} />
                        <FormInput label="OWASP Family" name="owaspFamily" value={formData.owaspFamily} onChange={handleChange} required />
                        <FormInput label="CWE" name="cwe" value={formData.cwe} onChange={handleChange} required />
                        <FormInput label="Affected URL" name="affectedUrl" value={formData.affectedUrl} onChange={handleChange} placeholder="https://example.com/page" />
                        <FormInput label="Affected Parameter" name="affectedParameter" value={formData.affectedParameter} onChange={handleChange} placeholder="e.g., id" />
                        <FormTextarea label="Attack Value (Payload)" name="attackValue" value={formData.attackValue} onChange={handleChange} rows={3} />
                        <div>
                            <label className="block text-sm font-bold text-gray-700 mb-1">Upload Evidence (Images)</label>
                            <input type="file" multiple onChange={handleFileChange} className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-pink-50 file:text-pink-700 hover:file:bg-pink-100"/>
                        </div>
                    </div>
                </div>
                <div className="p-4 bg-gray-50 flex justify-end space-x-2">
                    <button type="button" onClick={onClose} className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md">Cancel</button>
                    <button type="submit" disabled={isSaving} className="px-4 py-2 text-white bg-blue-600 rounded-md">
                        {isSaving ? 'Saving...' : 'Save Vulnerability'}
                    </button>
                </div>
            </form>
        </Modal>
    );
};

// Helper components for form fields
const FormInput = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-bold text-gray-700 mb-1">{label}</label>
        <input {...props} className="w-full p-2 border rounded-md" />
    </div>
);
const FormTextarea = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-bold text-gray-700 mb-1">{label}</label>
        <textarea {...props} className="w-full p-2 border rounded-md"></textarea>
    </div>
);

export default AddVulnerabilityModal;
