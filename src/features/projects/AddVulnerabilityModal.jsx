// =======================================================================
// FILE: src/features/projects/AddVulnerabilityModal.jsx (FIXED FOCUS ISSUE)
// PURPOSE: Modal for adding vulnerability with all ProjectVulnerability schema fields and fixed input focus
// =======================================================================
import { useState, useEffect, useCallback } from 'react';
import Modal from '../../components/Modal';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor';
import FormInput from '../../components/FormInput'; // ✅ Import existing FormInput
import FormSelect from '../../components/FormSelect'; // ✅ Import FormSelect if available
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import { addProjectVulnerability } from '../../api/projectVulnerabilitiesApi';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import toast from 'react-hot-toast';

// Icons
const BugIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const LinkIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
);

const UploadIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const ToggleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const ShieldIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
  </svg>
);

const ScopeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
  </svg>
);

const CheckboxIcon = ({ checked }) => (
  <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${
    checked 
      ? 'bg-primary border-primary text-primary-foreground' 
      : 'border-input bg-background'
  }`}>
    {checked && (
      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
      </svg>
    )}
  </div>
);

// Updated initial form state to match ProjectVulnerability schema
const initialFormState = {
  // Basic vulnerability info
  vulnName: '',
  severity: 'Medium',
  
  // Content fields
  description: '',
  impact: '',
  recommendation: '',
  
  // Classification fields
  owaspFamily: '',
  cwe: '',
  
  // Technical details
  affectedUrl: '',
  affectedParameter: '',
  attackValue: '',
  
  // Status and scope
  review: 'open',
  accrosTheApp: false
};

const AddVulnerabilityModal = ({ isOpen, onClose, onVulnerabilityAdded, projectId }) => {
  const { user } = useAuth();
  const { theme, color } = useTheme();
  
  const [formData, setFormData] = useState(initialFormState);
  const [predefinedVulns, setPredefinedVulns] = useState([]);
  const [isManualEntry, setIsManualEntry] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [errors, setErrors] = useState({});
  const [activeTab, setActiveTab] = useState('basic');

  // Severity options matching schema enum
  const severityOptions = [
    { value: 'Critical', label: 'Critical' },
    { value: 'High', label: 'High' },
    { value: 'Medium', label: 'Medium' },
    { value: 'Low', label: 'Low' },
    { value: 'Info', label: 'Informational' }
  ];

  // Review status options matching schema enum
  const reviewOptions = [
    { value: 'open', label: 'Open' },
    { value: 'close', label: 'Closed' },
    { value: 'not_in_scope', label: 'Not in Scope' },
    { value: 'obsolete', label: 'Obsolete' },
    { value: 'unable_to_verify', label: 'Unable to Verify' }
  ];

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Info': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getVulnerabilityDatabase();
        setPredefinedVulns(response.data || []);
      } catch (error) {
        console.error('Error fetching vulnerability database:', error);
        toast.error("Could not load vulnerability database.");
      }
    };

    if (isOpen) {
      setFormData(initialFormState);
      setSelectedFiles([]);
      setIsManualEntry(false);
      setErrors({});
      setActiveTab('basic');
      fetchData();
    }
  }, [isOpen]);

  const handleVulnNameChange = (vulnName) => {
    const selectedVuln = predefinedVulns.find(v => v.vulnName === vulnName);
    
    if (selectedVuln) {
      setFormData(prev => ({
        ...prev,
        vulnName: selectedVuln.vulnName,
        description: selectedVuln.description || '',
        impact: selectedVuln.impact || '',
        recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
        owaspFamily: selectedVuln.owaspFamily || '',
        cwe: selectedVuln.cweId || selectedVuln.cwe || '',
        severity: selectedVuln.severity || 'Medium'
      }));
    } else {
      setFormData(prev => ({ ...prev, vulnName }));
    }

    if (errors.vulnName) {
      setErrors(prev => ({ ...prev, vulnName: null }));
    }
  };

  // ✅ FIXED: Memoized handlers to prevent re-creation
  const handleChange = useCallback((e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  }, [errors]);

  const handleEditorChange = useCallback((field, data) => {
    setFormData(prev => ({ ...prev, [field]: data }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  }, [errors]);

  const handleFileChange = (e) => {
    setSelectedFiles(Array.from(e.target.files));
  };

  const validateForm = () => {
    const newErrors = {};

    // Required fields validation
    if (!formData.vulnName.trim()) {
      newErrors.vulnName = 'Vulnerability name is required';
    }
    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }
    if (!formData.impact.trim()) {
      newErrors.impact = 'Impact description is required';
    }
    if (!formData.recommendation.trim()) {
      newErrors.recommendation = 'Recommendation is required';
    }
    if (!formData.owaspFamily.trim()) {
      newErrors.owaspFamily = 'OWASP Family is required';
    }
    if (!formData.cwe.trim()) {
      newErrors.cwe = 'CWE is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      toast.error('Please fix the errors below');
      return;
    }

    setIsSaving(true);
    const submissionData = new FormData();

    // Add all form data
    Object.keys(formData).forEach(key => {
      submissionData.append(key, formData[key]);
    });

    submissionData.append('projectId', projectId);
    submissionData.append('user_name', user.name || 'Unknown User');

    // Add files
    selectedFiles.forEach((file) => submissionData.append('uploads', file));

    try {
      await addProjectVulnerability(projectId, submissionData);
      toast.success("Vulnerability added successfully!");
      onVulnerabilityAdded();
      onClose();
    } catch (error) {
      console.error('Error adding vulnerability:', error);
      toast.error(error.message || 'Failed to add vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    setFormData(initialFormState);
    setSelectedFiles([]);
    setIsManualEntry(false);
    setErrors({});
    onClose();
  };

  // ✅ FIXED: FormCheckbox component moved outside to prevent re-creation
  const FormCheckbox = ({ label, checked, onChange, description, name }) => (
    <div className="flex items-start space-x-4 p-4 bg-muted/30 rounded-lg border border-border hover:bg-muted/50 transition-colors">
      <button
        type="button"
        onClick={() => onChange({ target: { name, type: 'checkbox', checked: !checked } })}
        className="mt-1 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded"
      >
        <CheckboxIcon checked={checked} />
      </button>
      <div className="flex-1">
        <label 
          onClick={() => onChange({ target: { name, type: 'checkbox', checked: !checked } })}
          className="text-sm font-semibold text-card-foreground cursor-pointer block"
        >
          {label}
        </label>
        {description && (
          <p className="text-sm text-muted-foreground mt-2 leading-relaxed">{description}</p>
        )}
      </div>
    </div>
  );

  const vulnOptions = predefinedVulns
    .filter(v => v && v.vulnName)
    .map(v => ({ value: v.vulnName, label: v.vulnName }));

  const tabs = [
    { id: 'basic', label: 'Basic Info', icon: BugIcon },
    { id: 'technical', label: 'Technical Details', icon: ScopeIcon },
    { id: 'classification', label: 'Classification', icon: ShieldIcon },
  ];

  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} maxWidth="7xl" showCloseButton={false}>
      <div className={`${theme} theme-${color} flex flex-col h-full max-h-[calc(100vh-4rem)]`}>
        {/* Fixed Header */}
        <div className="flex items-center justify-between p-6 border-b border-border bg-gradient-to-r from-red-50/50 to-orange-50/50 dark:from-red-900/10 dark:to-orange-900/10 flex-shrink-0">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-red-100 dark:bg-red-900/20 rounded-xl">
              <BugIcon className="text-red-600 w-6 h-6" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-card-foreground">
                Add New Vulnerability
              </h2>
              <p className="text-muted-foreground mt-1">
                Report a new security vulnerability instance
              </p>
            </div>
          </div>
          
          <button
            onClick={onClose}
            className="p-2 text-muted-foreground hover:text-foreground transition-colors rounded-lg hover:bg-accent"
            disabled={isSaving}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Fixed Tab Navigation */}
        <div className="border-b border-border bg-muted/20 flex-shrink-0">
          <div className="flex overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                type="button"
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-3 px-6 py-4 text-sm font-semibold transition-colors whitespace-nowrap ${
                  activeTab === tab.id
                    ? 'text-primary border-b-2 border-primary bg-background'
                    : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                }`}
              >
                <tab.icon />
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        <form onSubmit={handleSubmit} className="flex flex-col flex-1 min-h-0">
          {/* Scrollable Content */}
          <div className="flex-1 overflow-y-auto p-6">
            {activeTab === 'basic' && (
              <div className="space-y-6">
                {/* Vulnerability Selection */}
                <div className="flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                  <div className="flex items-center gap-3">
                    <ToggleIcon className="text-blue-600" />
                    <div>
                      <p className="font-semibold text-blue-900 dark:text-blue-100">Entry Mode</p>
                      <p className="text-sm text-blue-700 dark:text-blue-200">
                        {isManualEntry ? 'Manual entry mode' : 'Select from predefined vulnerabilities'}
                      </p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={() => setIsManualEntry(!isManualEntry)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                  >
                    {isManualEntry ? 'Use Predefined' : 'Manual Entry'}
                  </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Vulnerability Name */}
                  <div className="lg:col-span-2">
                    {isManualEntry ? (
                      <FormInput
                        label="Vulnerability Name"
                        name="vulnName"
                        value={formData.vulnName}
                        onChange={handleChange}
                        placeholder="Enter vulnerability name"
                        required
                        error={errors.vulnName}
                        description="Enter a descriptive name for this vulnerability"
                      />
                    ) : (
                      <div className="space-y-3">
                        <label className="block text-sm font-semibold text-card-foreground">
                          Vulnerability Name
                          <span className="text-red-500 ml-1">*</span>
                        </label>
                        <SearchableDropdown
                          options={vulnOptions}
                          value={formData.vulnName}
                          onChange={handleVulnNameChange}
                          placeholder="Search and select a vulnerability..."
                          error={errors.vulnName}
                        />
                        {errors.vulnName && <p className="text-red-500 text-sm">{errors.vulnName}</p>}
                        <p className="text-muted-foreground text-sm">Search from our vulnerability database</p>
                      </div>
                    )}
                  </div>

                  {/* Severity */}
                  <div className="space-y-3">
                    <label className="block text-sm font-semibold text-card-foreground">
                      Severity <span className="text-red-500 ml-1">*</span>
                    </label>
                    <select
                      name="severity"
                      value={formData.severity}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                    >
                      {severityOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Review Status */}
                  <div className="space-y-3">
                    <label className="block text-sm font-semibold text-card-foreground">
                      Review Status
                    </label>
                    <select
                      name="review"
                      value={formData.review}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                    >
                      {reviewOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <p className="text-muted-foreground text-sm">Current status of this vulnerability</p>
                  </div>
                </div>

                {/* Description */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Description
                    <span className="text-red-500 ml-1">*</span>
                  </label>
                  <RichTextEditor
                    value={formData.description}
                    onChange={(data) => handleEditorChange('description', data)}
                    placeholder="Provide a detailed description of the vulnerability..."
                    height={200}
                  />
                  {errors.description && <p className="text-red-500 text-sm mt-2">{errors.description}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Describe how this vulnerability was discovered and its technical details</p>
                </div>

                {/* Impact */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Impact
                    <span className="text-red-500 ml-1">*</span>
                  </label>
                  <RichTextEditor
                    value={formData.impact}
                    onChange={(data) => handleEditorChange('impact', data)}
                    placeholder="Describe the potential impact of this vulnerability..."
                    height={200}
                  />
                  {errors.impact && <p className="text-red-500 text-sm mt-2">{errors.impact}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Explain what could happen if this vulnerability is exploited</p>
                </div>

                {/* Recommendation */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Recommendation
                    <span className="text-red-500 ml-1">*</span>
                  </label>
                  <RichTextEditor
                    value={formData.recommendation}
                    onChange={(data) => handleEditorChange('recommendation', data)}
                    placeholder="Provide recommendations to fix this vulnerability..."
                    height={200}
                  />
                  {errors.recommendation && <p className="text-red-500 text-sm mt-2">{errors.recommendation}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Provide clear steps to remediate this vulnerability</p>
                </div>
              </div>
            )}

            {activeTab === 'technical' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <FormInput
                    label="Affected URL"
                    name="affectedUrl"
                    value={formData.affectedUrl}
                    onChange={handleChange}
                    placeholder="https://example.com/vulnerable-page"
                    type="url"
                    description="The specific URL where this vulnerability was found"
                  />

                  <FormInput
                    label="Affected Parameter"
                    name="affectedParameter"
                    value={formData.affectedParameter}
                    onChange={handleChange}
                    placeholder="e.g., username, id, search"
                    description="The parameter that is vulnerable"
                  />
                </div>

                <FormInput
                  label="Attack Value/Payload"
                  name="attackValue"
                  value={formData.attackValue}
                  onChange={handleChange}
                  placeholder="Enter the attack payload or value used..."
                  type="textarea"
                  description="The actual payload or value used to exploit this vulnerability"
                />

                {/* Application Scope */}
                <FormCheckbox
                  label="Affects Entire Application"
                  name="accrosTheApp"
                  checked={formData.accrosTheApp}
                  onChange={handleChange}
                  description="Check this if the vulnerability affects the entire application, not just a specific page or component"
                />

                {/* File Upload */}
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-card-foreground">
                    Evidence Files
                  </label>
                  <div className="border-2 border-dashed border-input rounded-lg p-6 text-center hover:border-primary/50 transition-colors">
                    <UploadIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                    <p className="text-sm text-muted-foreground mb-2">
                      Drag and drop files here, or click to select
                    </p>
                    <input
                      type="file"
                      multiple
                      onChange={handleFileChange}
                      className="hidden"
                      id="file-upload"
                      accept="image/*,.pdf,.doc,.docx,.txt"
                    />
                    <label
                      htmlFor="file-upload"
                      className="inline-flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg cursor-pointer hover:bg-primary/90 transition-colors text-sm font-medium"
                    >
                      <UploadIcon />
                      Choose Files
                    </label>
                  </div>
                  {selectedFiles.length > 0 && (
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-card-foreground">Selected Files:</p>
                      {selectedFiles.map((file, index) => (
                        <div key={index} className="flex items-center gap-2 text-sm text-muted-foreground">
                          <span>• {file.name}</span>
                          <span className="text-xs">({(file.size / 1024).toFixed(1)} KB)</span>
                        </div>
                      ))}
                    </div>
                  )}
                  <p className="text-muted-foreground text-sm">Upload screenshots, proof-of-concept files, or other evidence</p>
                </div>
              </div>
            )}

            {activeTab === 'classification' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <FormInput
                    label="OWASP Family"
                    name="owaspFamily"
                    value={formData.owaspFamily}
                    onChange={handleChange}
                    placeholder="e.g., A03-2021-Injection"
                    required
                    error={errors.owaspFamily}
                    description="OWASP Top 10 category this vulnerability falls under"
                  />

                  <FormInput
                    label="CWE ID"
                    name="cwe"
                    value={formData.cwe}
                    onChange={handleChange}
                    placeholder="e.g., CWE-79, CWE-89"
                    required
                    error={errors.cwe}
                    description="Common Weakness Enumeration identifier"
                  />
                </div>

                {/* Current Severity Display */}
                <div className="p-4 bg-muted/30 rounded-lg border border-border">
                  <h4 className="text-sm font-semibold text-card-foreground mb-2">Current Classification</h4>
                  <div className="flex items-center gap-4">
                    <div className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold border ${getSeverityColor(formData.severity)}`}>
                      <AlertTriangleIcon className="w-4 h-4 mr-2" />
                      {formData.severity}
                    </div>
                    {formData.owaspFamily && (
                      <div className="text-sm text-muted-foreground">
                        OWASP: {formData.owaspFamily}
                      </div>
                    )}
                    {formData.cwe && (
                      <div className="text-sm text-muted-foreground">
                        {formData.cwe}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Fixed Footer */}
          <div className="flex justify-end gap-4 p-6 border-t border-border bg-muted/10 flex-shrink-0">
            <button
              type="button"
              onClick={handleCancel}
              disabled={isSaving}
              className="px-6 py-3 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-semibold transition-all duration-200 disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSaving}
              className="px-6 py-3 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-semibold transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-3 min-w-[160px] justify-center"
            >
              {isSaving ? (
                <>
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                  Adding...
                </>
              ) : (
                <>
                  <SaveIcon />
                  Add Vulnerability
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </Modal>
  );
};

export default AddVulnerabilityModal;
