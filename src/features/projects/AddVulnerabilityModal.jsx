// =======================================================================
// FILE: src/features/projects/AddVulnerabilityModal.jsx (UPDATED)
// PURPOSE: A modal for adding a new vulnerability instance to a project with theme support.
// =======================================================================
import { useState, useEffect } from 'react';
import Modal from '../../components/Modal';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor';
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import { addProjectVulnerability } from '../../api/projectVulnerabilitiesApi'; 
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import toast from 'react-hot-toast';

// Icons
const BugIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const LinkIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
);

const UploadIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const ToggleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const initialFormState = {
  severity: 'Medium',
  vulnName: '',
  description: '',
  impact: '',
  recommendation: '',
  owaspFamily: '',
  cwe: '',
  affectedUrl: '',
  affectedParameter: '',
  attackValue: '',
};

const AddVulnerabilityModal = ({ isOpen, onClose, onVulnerabilityAdded, projectId }) => {
  const { user } = useAuth();
  const { theme, color } = useTheme();
  
  const [formData, setFormData] = useState(initialFormState);
  const [predefinedVulns, setPredefinedVulns] = useState([]);
  const [isManualEntry, setIsManualEntry] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [errors, setErrors] = useState({});

  // Severity options with colors
  const severityOptions = [
    { value: 'Critical', label: 'Critical' },
    { value: 'High', label: 'High' },
    { value: 'Medium', label: 'Medium' },
    { value: 'Low', label: 'Low' },
    { value: 'Informational', label: 'Informational' }
  ];

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Informational': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getVulnerabilityDatabase();
        setPredefinedVulns(response.data || []);
      } catch (error) {
        console.error('Error fetching vulnerability database:', error);
        toast.error("Could not load vulnerability database.");
      }
    };

    if (isOpen) {
      setFormData(initialFormState);
      setSelectedFiles([]);
      setIsManualEntry(false);
      setErrors({});
      fetchData();
    }
  }, [isOpen]);

  const handleVulnNameChange = (vulnName) => {
    const selectedVuln = predefinedVulns.find(v => v.vulnName === vulnName);
    if (selectedVuln) {
      setFormData(prev => ({
        ...prev,
        vulnName: selectedVuln.vulnName,
        description: selectedVuln.description || '',
        impact: selectedVuln.impact || '',
        recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
        owaspFamily: selectedVuln.owaspFamily || '',
        cwe: selectedVuln.cweId || selectedVuln.cwe || '',
        severity: selectedVuln.severity || 'Medium'
      }));
    } else {
      setFormData(prev => ({ ...prev, vulnName }));
    }

    // Clear error when user makes selection
    if (errors.vulnName) {
      setErrors(prev => ({ ...prev, vulnName: null }));
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };

  const handleEditorChange = (field, data) => {
    setFormData(prev => ({ ...prev, [field]: data }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const handleFileChange = (e) => {
    setSelectedFiles(Array.from(e.target.files));
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.vulnName.trim()) {
      newErrors.vulnName = 'Vulnerability name is required';
    }
    
    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }
    
    if (!formData.impact.trim()) {
      newErrors.impact = 'Impact description is required';
    }
    
    if (!formData.recommendation.trim()) {
      newErrors.recommendation = 'Recommendation is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      toast.error('Please fix the errors below');
      return;
    }

    setIsSaving(true);
    const submissionData = new FormData();
    
    // Add form data
    Object.keys(formData).forEach(key => {
      submissionData.append(key, formData[key]);
    });
    
    submissionData.append('projectId', projectId);
    submissionData.append('user_name', user.name || 'Unknown User');
    
    // Add files
    selectedFiles.forEach((file) => submissionData.append('uploads', file));

    try {
      await addProjectVulnerability(projectId, submissionData);
      toast.success("Vulnerability added successfully!");
      onVulnerabilityAdded();
      onClose();
    } catch (error) {
      console.error('Error adding vulnerability:', error);
      toast.error(error.message || 'Failed to add vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    setFormData(initialFormState);
    setSelectedFiles([]);
    setIsManualEntry(false);
    setErrors({});
    onClose();
  };

  const vulnOptions = predefinedVulns
    .filter(v => v && v.vulnName)
    .map(v => ({ value: v.vulnName, label: v.vulnName }));

  return (
    <div className={`${theme} theme-${color}`}>
      <Modal
        isOpen={isOpen}
        onClose={handleCancel}
        title={
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary/10 rounded-lg">
              <BugIcon className="text-primary" />
            </div>
            <div>
              <h3 className="text-lg font-semibold">Add Vulnerability</h3>
              <p className="text-sm text-muted-foreground">
                Add a new vulnerability to this project
              </p>
            </div>
          </div>
        }
        size="4xl"
      >
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Entry Mode Toggle */}
          <div className="flex items-center justify-between p-4 bg-muted/30 rounded-lg border border-border">
            <div>
              <h4 className="font-medium text-card-foreground">Entry Mode</h4>
              <p className="text-sm text-muted-foreground">
                Choose from predefined vulnerabilities or create a custom entry
              </p>
            </div>
            <button
              type="button"
              onClick={() => setIsManualEntry(!isManualEntry)}
              className={`
                flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors
                ${isManualEntry 
                  ? 'bg-secondary text-secondary-foreground hover:bg-secondary/80' 
                  : 'bg-primary text-primary-foreground hover:bg-primary/90'
                }
              `}
            >
              <ToggleIcon />
              {isManualEntry ? 'Switch to Predefined' : 'Switch to Manual Entry'}
            </button>
          </div>

          {/* Vulnerability Selection/Entry */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Vulnerability Name */}
            <div className="md:col-span-2">
              {isManualEntry ? (
                <div>
                  <label htmlFor="vulnName" className="block text-sm font-medium text-card-foreground mb-2">
                    Vulnerability Name *
                  </label>
                  <input
                    type="text"
                    id="vulnName"
                    name="vulnName"
                    value={formData.vulnName}
                    onChange={handleChange}
                    className={`
                      w-full px-4 py-3 border rounded-lg bg-background text-foreground 
                      placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent
                      ${errors.vulnName ? 'border-red-500' : 'border-input'}
                      transition-all duration-200
                    `}
                    placeholder="Enter vulnerability name"
                    disabled={isSaving}
                  />
                  {errors.vulnName && (
                    <p className="mt-1 text-sm text-red-500">{errors.vulnName}</p>
                  )}
                </div>
              ) : (
                <SearchableDropdown
                  label="Select Predefined Vulnerability *"
                  options={vulnOptions}
                  value={formData.vulnName}
                  onChange={handleVulnNameChange}
                  placeholder="Search and select a vulnerability..."
                  error={errors.vulnName}
                  disabled={isSaving}
                />
              )}
            </div>

            {/* Severity */}
            <div>
              <label className="block text-sm font-medium text-card-foreground mb-2">
                Severity Level *
              </label>
              <select
                name="severity"
                value={formData.severity}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                disabled={isSaving}
              >
                {severityOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              {formData.severity && (
                <div className={`mt-2 inline-flex items-center px-2 py-1 rounded-md text-xs font-medium border ${getSeverityColor(formData.severity)}`}>
                  <AlertTriangleIcon className="w-3 h-3 mr-1" />
                  {formData.severity}
                </div>
              )}
            </div>

            {/* OWASP Family */}
            <div>
              <label htmlFor="owaspFamily" className="block text-sm font-medium text-card-foreground mb-2">
                OWASP Family
              </label>
              <input
                type="text"
                id="owaspFamily"
                name="owaspFamily"
                value={formData.owaspFamily}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                placeholder="e.g., A03:2021 - Injection"
                disabled={isSaving}
              />
            </div>

            {/* CWE */}
            <div>
              <label htmlFor="cwe" className="block text-sm font-medium text-card-foreground mb-2">
                CWE ID
              </label>
              <input
                type="text"
                id="cwe"
                name="cwe"
                value={formData.cwe}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                placeholder="e.g., CWE-89"
                disabled={isSaving}
              />
            </div>

            {/* Affected URL */}
            <div>
              <label htmlFor="affectedUrl" className="block text-sm font-medium text-card-foreground mb-2">
                Affected URL
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <LinkIcon className="text-muted-foreground" />
                </div>
                <input
                  type="url"
                  id="affectedUrl"
                  name="affectedUrl"
                  value={formData.affectedUrl}
                  onChange={handleChange}
                  className="w-full pl-10 pr-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                  placeholder="https://example.com/vulnerable-page"
                  disabled={isSaving}
                />
              </div>
            </div>

            {/* Affected Parameter */}
            <div>
              <label htmlFor="affectedParameter" className="block text-sm font-medium text-card-foreground mb-2">
                Affected Parameter
              </label>
              <input
                type="text"
                id="affectedParameter"
                name="affectedParameter"
                value={formData.affectedParameter}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200"
                placeholder="e.g., username, id, search"
                disabled={isSaving}
              />
            </div>

            {/* Attack Value */}
            <div className="md:col-span-2">
              <label htmlFor="attackValue" className="block text-sm font-medium text-card-foreground mb-2">
                Attack Value/Payload
              </label>
              <textarea
                id="attackValue"
                name="attackValue"
                value={formData.attackValue}
                onChange={handleChange}
                rows={3}
                className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all duration-200 resize-none"
                placeholder="Enter the attack payload or value used to exploit this vulnerability..."
                disabled={isSaving}
              />
            </div>
          </div>

          {/* Description */}
          <div>
            <RichTextEditor
              label="Description *"
              value={formData.description}
              onChange={(value) => handleEditorChange('description', value)}
              placeholder="Provide a detailed description of the vulnerability..."
              error={errors.description}
              disabled={isSaving}
              height={150}
            />
          </div>

          {/* Impact */}
          <div>
            <RichTextEditor
              label="Impact *"
              value={formData.impact}
              onChange={(value) => handleEditorChange('impact', value)}
              placeholder="Describe the potential impact of this vulnerability..."
              error={errors.impact}
              disabled={isSaving}
              height={150}
            />
          </div>

          {/* Recommendation */}
          <div>
            <RichTextEditor
              label="Recommendation *"
              value={formData.recommendation}
              onChange={(value) => handleEditorChange('recommendation', value)}
              placeholder="Provide recommendations to fix this vulnerability..."
              error={errors.recommendation}
              disabled={isSaving}
              height={150}
            />
          </div>

          {/* File Upload */}
          <div>
            <label className="block text-sm font-medium text-card-foreground mb-2">
              Proof of Concept Files
            </label>
            <div className="border-2 border-dashed border-input rounded-lg p-6 text-center hover:border-primary/50 transition-colors">
              <UploadIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
              <div className="space-y-2">
                <p className="text-sm text-muted-foreground">
                  Upload screenshots, payloads, or other proof of concept files
                </p>
                <input
                  type="file"
                  multiple
                  onChange={handleFileChange}
                  className="block w-full text-sm text-muted-foreground file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90 transition-colors"
                  accept="image/*,.pdf,.doc,.docx,.txt"
                  disabled={isSaving}
                />
              </div>
              {selectedFiles.length > 0 && (
                <div className="mt-4">
                  <p className="text-sm font-medium text-card-foreground mb-2">Selected Files:</p>
                  <div className="space-y-1">
                    {selectedFiles.map((file, index) => (
                      <p key={index} className="text-sm text-muted-foreground">
                        {file.name} ({(file.size / 1024).toFixed(1)} KB)
                      </p>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Form Actions */}
          <div className="flex flex-col sm:flex-row gap-3 justify-end pt-6 border-t border-border">
            <button
              type="button"
              onClick={handleCancel}
              disabled={isSaving}
              className="px-6 py-2.5 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSaving}
              className="px-6 py-2.5 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 min-w-[140px]"
            >
              {isSaving ? (
                <>
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                  Adding...
                </>
              ) : (
                <>
                  <SaveIcon />
                  Add Vulnerability
                </>
              )}
            </button>
          </div>
        </form>
      </Modal>
    </div>
  );
};

export default AddVulnerabilityModal;
