// =======================================================================
// FILE: src/features/projects/AddVulnerabilityModal.jsx (COMPLETE FIXED VERSION)
// PURPOSE: Fixed dropdown selection and individual image caption functionality
// =======================================================================

import { useState, useEffect, useCallback, useMemo } from 'react';
import Modal from '../../components/Modal';
import SearchableDropdown from '../../components/SearchableDropdown';
import RichTextEditor from '../../components/RichTextEditor';
import FormInput from '../../components/FormInput';
import FormSelect from '../../components/FormSelect';
import { getVulnerabilityDatabase } from '../../api/vulnerabilityApi';
import { addProjectVulnerability } from '../../api/projectVulnerabilitiesApi';
import { useAuth } from '../../contexts/AuthContext';
import { useTheme } from '../../contexts/ThemeContext';
import toast from 'react-hot-toast';

// ✅ AI API service for form field generation with enhanced formatting
const AI_API_URL = import.meta.env.VITE_AI_API_URL || 'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent';
const AI_API_KEY = import.meta.env.VITE_AI_API_KEY;

// Icons
const BugIcon = () => (
  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10m0 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m0 0V6a2 2 0 012-2h6a2 2 0 012 2v2m-3 0V4" />
  </svg>
);

const AlertTriangleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
  </svg>
);

const LinkIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
);

const UploadIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
  </svg>
);

const ToggleIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
  </svg>
);

const SaveIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
  </svg>
);

const ShieldIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
  </svg>
);

const ScopeIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
  </svg>
);

const MagicWandIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12l2 2 4-4" />
  </svg>
);

const TrashIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
);

const ImageIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
  </svg>
);

const CheckboxIcon = ({ checked }) => (
  <div className={`w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${checked
    ? 'bg-primary border-primary text-primary-foreground'
    : 'border-input bg-background'
    }`}>
    {checked && (
      <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
      </svg>
    )}
  </div>
);

const RefreshIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
  </svg>
);

const EditIcon = () => (
  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15.828a2 2 0 01-2.828 0l-1.414-1.414a2 2 0 010-2.828l8.586-8.586z" />
  </svg>
);

// ✅ Individual Image Upload Component with Caption
const IndividualImageUpload = ({ onImageAdd, maxImages, currentCount }) => {
  const [selectedImage, setSelectedImage] = useState(null);
  const [caption, setCaption] = useState('');
  const [isAdding, setIsAdding] = useState(false);

  const handleImageSelect = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (!validImageTypes.includes(file.type)) {
      toast.error('Only image files (JPEG, PNG, GIF, WebP) are allowed.');
      e.target.value = '';
      return;
    }

    setSelectedImage(file);
    setCaption('');
  };

  const handleAddImage = async () => {
    if (!selectedImage) {
      toast.error('Please select an image first.');
      return;
    }

    if (!caption.trim()) {
      toast.error('Please enter a caption for this image.');
      return;
    }

    setIsAdding(true);
    try {
      await onImageAdd({
        file: selectedImage,
        caption: caption.trim()
      });

      setSelectedImage(null);
      setCaption('');

      const fileInput = document.getElementById('single-image-upload');
      if (fileInput) fileInput.value = '';

      toast.success('Image added successfully!');
    } catch (error) {
      toast.error('Failed to add image.');
    } finally {
      setIsAdding(false);
    }
  };

  const handleCancel = () => {
    setSelectedImage(null);
    setCaption('');
    const fileInput = document.getElementById('single-image-upload');
    if (fileInput) fileInput.value = '';
  };

  const isMaxReached = currentCount >= maxImages;

  return (
    <div className="space-y-4">
      {!selectedImage ? (
        <div className="border-2 border-dashed border-input rounded-lg p-6 text-center hover:border-primary/50 transition-colors">
          <ImageIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
          <p className="text-sm text-muted-foreground mb-2">
            Upload one image at a time with caption
          </p>
          <input
            type="file"
            accept="image/*"
            onChange={handleImageSelect}
            className="hidden"
            id="single-image-upload"
            disabled={isMaxReached}
          />
          <label
            htmlFor="single-image-upload"
            className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg cursor-pointer transition-colors text-sm font-medium ${isMaxReached
                ? 'bg-muted text-muted-foreground cursor-not-allowed'
                : 'bg-primary text-primary-foreground hover:bg-primary/90'
              }`}
          >
            <UploadIcon />
            {isMaxReached ? 'Maximum Images Reached' : 'Select Image'}
          </label>
          <p className="text-xs text-muted-foreground mt-2">
            Images: {currentCount}/{maxImages} | Supports: JPEG, PNG, GIF, WebP
          </p>
        </div>
      ) : (
        <div className="border border-border rounded-lg p-4 bg-muted/30">
          <div className="flex gap-4">
            <div className="flex-shrink-0">
              <img
                src={URL.createObjectURL(selectedImage)}
                alt="Preview"
                className="w-24 h-24 object-cover rounded-lg border border-border"
              />
            </div>

            <div className="flex-1 space-y-3">
              <div>
                <label className="block text-sm font-medium text-foreground mb-1">
                  Image Caption <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={caption}
                  onChange={(e) => setCaption(e.target.value)}
                  placeholder="Describe this evidence image..."
                  className="w-full px-3 py-2 border border-border rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                  disabled={isAdding}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  File: {selectedImage.name} ({(selectedImage.size / 1024).toFixed(1)} KB)
                </p>
              </div>

              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={handleAddImage}
                  disabled={isAdding || !caption.trim()}
                  className="px-3 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed text-sm font-medium flex items-center gap-2"
                >
                  {isAdding ? (
                    <>
                      <div className="w-3 h-3 border-2 border-current border-t-transparent rounded-full animate-spin" />
                      Adding...
                    </>
                  ) : (
                    <>
                      <SaveIcon />
                      Add Image
                    </>
                  )}
                </button>
                <button
                  type="button"
                  onClick={handleCancel}
                  disabled={isAdding}
                  className="px-3 py-2 border border-border rounded-lg hover:bg-accent text-sm font-medium"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// ✅ Image List Component showing uploaded images with captions
const ImageList = ({ images, onRemove, onEditCaption }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [editCaption, setEditCaption] = useState('');

  const handleStartEdit = (index, currentCaption) => {
    setEditingIndex(index);
    setEditCaption(currentCaption);
  };

  const handleSaveEdit = (index) => {
    if (!editCaption.trim()) {
      toast.error('Caption cannot be empty.');
      return;
    }

    onEditCaption(index, editCaption.trim());
    setEditingIndex(null);
    setEditCaption('');
    toast.success('Caption updated!');
  };

  const handleCancelEdit = () => {
    setEditingIndex(null);
    setEditCaption('');
  };

  if (images.length === 0) return null;

  return (
    <div className="space-y-3">
      <h4 className="text-sm font-medium text-foreground">
        Uploaded Images ({images.length})
      </h4>
      <div className="space-y-3">
        {images.map((image, index) => (
          <div key={index} className="flex gap-3 p-3 border border-border rounded-lg bg-background">
            <img
              src={URL.createObjectURL(image.file)}
              alt={`Evidence ${index + 1}`}
              className="w-16 h-16 object-cover rounded-lg border border-border flex-shrink-0"
            />

            <div className="flex-1 min-w-0">
              <div className="flex items-start justify-between gap-2">
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-foreground truncate" title={image.file.name}>
                    {image.file.name}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    {(image.file.size / 1024).toFixed(1)} KB
                  </p>

                  <div className="mt-2">
                    {editingIndex === index ? (
                      <div className="space-y-2">
                        <input
                          type="text"
                          value={editCaption}
                          onChange={(e) => setEditCaption(e.target.value)}
                          className="w-full px-2 py-1 text-sm border border-border rounded bg-background"
                          placeholder="Enter caption..."
                        />
                        <div className="flex gap-1">
                          <button
                            type="button"
                            onClick={() => handleSaveEdit(index)}
                            className="px-2 py-1 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90"
                          >
                            Save
                          </button>
                          <button
                            type="button"
                            onClick={handleCancelEdit}
                            className="px-2 py-1 text-xs border border-border rounded hover:bg-accent"
                          >
                            Cancel
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        <p className="text-sm text-foreground flex-1">
                          <span className="font-medium">Caption:</span> {image.caption}
                        </p>
                        <button
                          type="button"
                          onClick={() => handleStartEdit(index, image.caption)}
                          className="p-1 text-muted-foreground hover:text-foreground rounded"
                          title="Edit caption"
                        >
                          <EditIcon />
                        </button>
                      </div>
                    )}
                  </div>
                </div>

                <button
                  type="button"
                  onClick={() => onRemove(index)}
                  className="p-1 text-red-500 hover:text-red-700 rounded"
                  title="Remove image"
                >
                  <TrashIcon />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// ✅ Initial form state matching the database schema
const initialFormState = {
  vulnName: '',
  appendName: '',
  vulnId: '',
  severity: 'Medium',
  description: '',
  impact: '',
  recommendation: '',
  owaspFamily: '',
  cwe: '',
  affectedUrl: '',
  affectedParameter: '',
  attackValue: '',
  review: 'open',
  accrosTheApp: false
};

// ✅ AI Service for generating vulnerability form fields with proper HTML formatting
const generateVulnerabilityFields = async (explanation, selectedVulnType = null) => {
  try {
    const systemPrompt = `You are a cybersecurity expert assistant. Based on the user's vulnerability explanation, generate appropriate values for vulnerability assessment form fields.

IMPORTANT: You must respond with a valid JSON object containing ONLY these exact fields with proper HTML formatting:

{
  "vulnName": "string - Brief descriptive vulnerability name",
  "description": "string - HTML formatted detailed technical description with <ul><li> for bullet points and <strong> for important terms",
  "impact": "string - HTML formatted business and technical impact with <ul><li> for bullet points and <strong> for severity levels", 
  "recommendation": "string - HTML formatted remediation steps with <ol><li> for numbered steps and <strong> for critical actions",
  "severity": "string - One of: Critical, High, Medium, Low, Info",
  "owaspFamily": "string - OWASP category (e.g., A03-2021-Injection)",
  "cwe": "string - CWE identifier (e.g., CWE-79, CWE-89)",
  "affectedUrl": "string - URL where vulnerability was found (if applicable)",
  "affectedParameter": "string - Parameter name that is vulnerable (if applicable)",
  "attackValue": "string - Attack payload or value used for exploitation"
}

HTML FORMATTING REQUIREMENTS:
- Use <ul><li> for unordered bullet points
- Use <ol><li> for numbered/ordered lists  
- Use <strong> for important terms, severity levels, and critical actions
- Use <p> for paragraphs
- Ensure all HTML tags are properly closed
- Make content comprehensive with proper technical details

Guidelines:
- Base severity on industry standards (Critical/High/Medium/Low/Info only)
- Make descriptions technical but clear with bullet points
- Provide actionable recommendations with numbered steps
- Use proper OWASP format (e.g., A03-2021-Injection)
- Use proper CWE format (e.g., CWE-79)
- Be specific about affected URLs and parameters when relevant`;

    const userPrompt = `Please analyze this vulnerability explanation and generate comprehensive form field values with proper HTML formatting:

${explanation}

${selectedVulnType ? `This vulnerability is related to: ${selectedVulnType}` : ''}

Generate detailed vulnerability assessment data with proper HTML formatting including bullet points, numbered lists, and bold text for important information.`;

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: `${systemPrompt}\n\nUser Request: ${userPrompt}`
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        maxOutputTokens: 3000,
        topP: 0.8,
        topK: 40
      }
    };

    const response = await fetch(`${AI_API_URL}?key=${AI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API Error Response:', errorText);
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();

    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Invalid response format from Gemini API');
    }

    const generatedText = data.candidates[0].content.parts[0].text;

    let jsonMatch = generatedText.match(/``````/);
    if (!jsonMatch) {
      jsonMatch = generatedText.match(/\{[\s\S]*\}/);
    }

    if (!jsonMatch) {
      throw new Error('No valid JSON found in AI response');
    }

    const generatedFields = JSON.parse(jsonMatch[1] || jsonMatch[0]);
    return generatedFields;
  } catch (error) {
    console.error('AI field generation error:', error);
    throw new Error('Failed to generate vulnerability fields using AI. Please fill manually.');
  }
};

const AddVulnerabilityModal = ({ isOpen, onClose, onVulnerabilityAdded, projectId, project }) => {
  const { user } = useAuth();
  const { theme, color } = useTheme();

  const [formData, setFormData] = useState(initialFormState);
  const [predefinedVulns, setPredefinedVulns] = useState([]);
  const [isManualEntry, setIsManualEntry] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [imagesWithCaptions, setImagesWithCaptions] = useState([]);
  const [errors, setErrors] = useState({});
  const [activeTab, setActiveTab] = useState('basic');

  // AI-related state
  const [aiExplanation, setAiExplanation] = useState('');
  const [isGeneratingAI, setIsGeneratingAI] = useState(false);
  const [showAIHelper, setShowAIHelper] = useState(true);
  const [hasAIGeneratedContent, setHasAIGeneratedContent] = useState(false);
  const [aiGeneratedData, setAiGeneratedData] = useState(null);

  const severityOptions = [
    { value: 'Critical', label: 'Critical' },
    { value: 'High', label: 'High' },
    { value: 'Medium', label: 'Medium' },
    { value: 'Low', label: 'Low' },
    { value: 'Info', label: 'Informational' }
  ];

  const reviewOptions = [
    { value: 'open', label: 'Open' },
    { value: 'close', label: 'Closed' },
    { value: 'not_in_scope', label: 'Not in Scope' },
    { value: 'obsolete', label: 'Obsolete' },
    { value: 'unable_to_verify', label: 'Unable to Verify' }
  ];

  const getSeverityColor = (severity) => {
    const colors = {
      'Critical': 'text-red-600 bg-red-50 border-red-200 dark:bg-red-900/20 dark:text-red-400',
      'High': 'text-orange-600 bg-orange-50 border-orange-200 dark:bg-orange-900/20 dark:text-orange-400',
      'Medium': 'text-yellow-600 bg-yellow-50 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400',
      'Low': 'text-green-600 bg-green-50 border-green-200 dark:bg-green-900/20 dark:text-green-400',
      'Info': 'text-blue-600 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400'
    };
    return colors[severity] || 'text-gray-600 bg-gray-50 border-gray-200';
  };

  // ✅ FIXED: Enhanced API response handling with comprehensive debugging
  useEffect(() => {
    const fetchData = async () => {
      try {
        console.log('Fetching vulnerability database...');
        const response = await getVulnerabilityDatabase();
        console.log('Raw API response:', response);

        let vulnsArray = [];

        // Handle different response formats
        if (Array.isArray(response)) {
          vulnsArray = response;
        } else if (response && Array.isArray(response.data)) {
          vulnsArray = response.data;
        } else if (response && response.vulnerabilities && Array.isArray(response.vulnerabilities)) {
          vulnsArray = response.vulnerabilities;
        } else if (response && response.results && Array.isArray(response.results)) {
          vulnsArray = response.results;
        } else if (response && typeof response === 'object') {
          // Try to find any array property
          const arrayKeys = Object.keys(response).filter(key => Array.isArray(response[key]));
          if (arrayKeys.length > 0) {
            vulnsArray = response[arrayKeys[0]];
          }
        }

        console.log('Processed vulnerabilities array:', vulnsArray);
        setPredefinedVulns(Array.isArray(vulnsArray) ? vulnsArray : []);
      } catch (error) {
        console.error('Error fetching vulnerability database:', error);
        toast.error("Could not load vulnerability database.");
        setPredefinedVulns([]);
      }
    };

    if (isOpen) {
      setFormData(initialFormState);
      setSelectedFiles([]);
      setImagesWithCaptions([]);
      setIsManualEntry(false);
      setErrors({});
      setActiveTab('basic');
      setAiExplanation('');
      setShowAIHelper(true);
      setHasAIGeneratedContent(false);
      setAiGeneratedData(null);
      fetchData();
    }
  }, [isOpen]);

  // ✅ AI-powered form field generation
  const handleAIGeneration = async () => {
    if (!aiExplanation.trim()) {
      toast.error('Please provide a vulnerability explanation first');
      return;
    }

    if (!AI_API_KEY) {
      toast.error('AI API key not configured. Please check your environment variables.');
      return;
    }

    setIsGeneratingAI(true);
    try {
      const selectedVuln = predefinedVulns.find(v => v.vulnName === formData.vulnName);
      const vulnTypeName = selectedVuln ? selectedVuln.vulnName : null;

      const aiGeneratedFields = await generateVulnerabilityFields(aiExplanation, vulnTypeName);

      setAiGeneratedData(aiGeneratedFields);
      setHasAIGeneratedContent(true);

      setFormData(prev => ({
        ...prev,
        ...aiGeneratedFields,
        appendName: prev.appendName,
        accrosTheApp: prev.accrosTheApp,
        review: prev.review,
        vulnId: prev.vulnId
      }));

      toast.success('Form fields generated successfully using AI with proper formatting!');
      setShowAIHelper(false);

    } catch (error) {
      console.error('AI generation error:', error);
      toast.error(error.message || 'Failed to generate form fields using AI');
    } finally {
      setIsGeneratingAI(false);
    }
  };

  // ✅ FIXED: Smart vulnerability selection that preserves AI content and works correctly
  // const handleVulnerabilitySelect = (selectedValue) => {
  //   console.log('handleVulnerabilitySelect called with:', selectedValue);
  //   console.log('Available predefined vulns:', predefinedVulns);

  //   if (!selectedValue) {
  //     console.log('Clearing vulnerability selection');
  //     setFormData(prev => ({ 
  //       ...prev, 
  //       vulnName: '', 
  //       vulnId: '' 
  //     }));
  //     return;
  //   }

  //   const vulnName = selectedValue;
  //   console.log('Looking for vulnerability:', vulnName);

  //   // Try different property names that might be used in your database
  //   const selectedVuln = predefinedVulns.find(v => 
  //     v.vulnName === vulnName || 
  //     v.name === vulnName ||
  //     v.title === vulnName
  //   );

  //   console.log('Found vulnerability:', selectedVuln);

  //   if (selectedVuln) {
  //     if (hasAIGeneratedContent && aiGeneratedData) {
  //       console.log('AI content detected, showing preservation dialog');

  //       const shouldPreserveAI = window.confirm(
  //         `You have AI-generated content. Do you want to:\n\n` +
  //         `• Click "OK" to KEEP your AI-generated content and only update classification fields\n` +
  //         `• Click "Cancel" to REPLACE everything with database content\n\n` +
  //         `Recommended: Click "OK" to preserve your AI-generated content.`
  //       );

  //       if (shouldPreserveAI) {
  //         console.log('Preserving AI content, updating only classification');

  //         setFormData(prev => ({
  //           ...prev,
  //           vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
  //           vulnId: selectedVuln.id || selectedVuln._id || '',
  //           description: aiGeneratedData.description || prev.description,
  //           impact: aiGeneratedData.impact || prev.impact,
  //           recommendation: aiGeneratedData.recommendation || prev.recommendation,
  //           owaspFamily: aiGeneratedData.owaspFamily || selectedVuln.owaspFamily || prev.owaspFamily,
  //           cwe: aiGeneratedData.cwe || selectedVuln.cweId || selectedVuln.cwe || prev.cwe,
  //           severity: aiGeneratedData.severity || selectedVuln.severity || prev.severity
  //         }));

  //         toast.success('Vulnerability selected! AI-generated content preserved.');
  //       } else {
  //         console.log('Replacing with database content');

  //         setFormData(prev => ({
  //           ...prev,
  //           vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
  //           vulnId: selectedVuln.id || selectedVuln._id || '',
  //           description: selectedVuln.description || '',
  //           impact: selectedVuln.impact || '',
  //           recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
  //           owaspFamily: selectedVuln.owaspFamily || '',
  //           cwe: selectedVuln.cweId || selectedVuln.cwe || '',
  //           severity: selectedVuln.severity || 'Medium'
  //         }));

  //         setHasAIGeneratedContent(false);
  //         setAiGeneratedData(null);

  //         toast.info('Vulnerability fields updated from database.');
  //       }
  //     } else {
  //       console.log('No AI content, using database content normally');

  //       setFormData(prev => ({
  //         ...prev,
  //         vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
  //         vulnId: selectedVuln.id || selectedVuln._id || '',
  //         description: selectedVuln.description || '',
  //         impact: selectedVuln.impact || '',
  //         recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
  //         owaspFamily: selectedVuln.owaspFamily || '',
  //         cwe: selectedVuln.cweId || selectedVuln.cwe || '',
  //         severity: selectedVuln.severity || 'Medium'
  //       }));
  //     }
  //   } else {
  //     console.log('Vulnerability not found in database, treating as manual entry');

  //     setFormData(prev => ({ 
  //       ...prev, 
  //       vulnName: vulnName,
  //       vulnId: ''
  //     }));
  //   }

  //   if (errors.vulnName) {
  //     setErrors(prev => ({ ...prev, vulnName: null }));
  //   }

  //   console.log('Updated formData vulnName to:', vulnName);
  // };
  const handleVulnerabilitySelect = (selectedValue) => {
    console.log('handleVulnerabilitySelect called with:', selectedValue);
    console.log('Available predefined vulns:', predefinedVulns);

    if (!selectedValue) {
      console.log('Clearing vulnerability selection');
      setFormData(prev => ({
        ...prev,
        vulnName: '',
        vulnId: ''
      }));
      return;
    }

    const vulnName = selectedValue;
    console.log('Looking for vulnerability:', vulnName);

    // Try different property names that might be used in your database
    const selectedVuln = predefinedVulns.find(v =>
      v.vulnName === vulnName ||
      v.name === vulnName ||
      v.title === vulnName
    );

    console.log('Found vulnerability:', selectedVuln);

    if (selectedVuln) {
      if (hasAIGeneratedContent && aiGeneratedData) {
        console.log('AI content detected, showing preservation dialog');

        const shouldPreserveAI = window.confirm(
          `You have AI-generated content. Do you want to:\n\n` +
          `• Click "OK" to KEEP your AI-generated content and only update classification fields\n` +
          `• Click "Cancel" to REPLACE everything with database content\n\n` +
          `Recommended: Click "OK" to preserve your AI-generated content.`
        );

        if (shouldPreserveAI) {
          console.log('Preserving AI content, updating only classification');

          setFormData(prev => ({
            ...prev,
            vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
            vulnId: selectedVuln.id || selectedVuln._id || '',
            description: aiGeneratedData.description || prev.description,
            impact: aiGeneratedData.impact || prev.impact,
            recommendation: aiGeneratedData.recommendation || prev.recommendation,
            owaspFamily: aiGeneratedData.owaspFamily || selectedVuln.owaspFamily || prev.owaspFamily,
            cwe: aiGeneratedData.cwe || selectedVuln.cweId || selectedVuln.cwe || prev.cwe,
            severity: aiGeneratedData.severity || selectedVuln.severity || prev.severity
          }));

          toast.success('Vulnerability selected! AI-generated content preserved.');
        } else {
          console.log('Replacing with database content');

          setFormData(prev => ({
            ...prev,
            vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
            vulnId: selectedVuln.id || selectedVuln._id || '',
            description: selectedVuln.description || '',
            impact: selectedVuln.impact || '',
            recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
            owaspFamily: selectedVuln.owaspFamily || '',
            cwe: selectedVuln.cweId || selectedVuln.cwe || '',
            severity: selectedVuln.severity || 'Medium'
          }));

          setHasAIGeneratedContent(false);
          setAiGeneratedData(null);

          toast.info('Vulnerability fields updated from database.');
        }
      } else {
        console.log('No AI content, using database content normally');

        setFormData(prev => ({
          ...prev,
          vulnName: selectedVuln.vulnName || selectedVuln.name || selectedVuln.title,
          vulnId: selectedVuln.id || selectedVuln._id || '',
          description: selectedVuln.description || '',
          impact: selectedVuln.impact || '',
          recommendation: selectedVuln.remediation || selectedVuln.recommendation || '',
          owaspFamily: selectedVuln.owaspFamily || '',
          cwe: selectedVuln.cweId || selectedVuln.cwe || '',
          severity: selectedVuln.severity || 'Medium'
        }));
      }
    } else {
      console.log('Vulnerability not found in database, treating as manual entry');

      setFormData(prev => ({
        ...prev,
        vulnName: vulnName,
        vulnId: ''
      }));
    }

    if (errors.vulnName) {
      setErrors(prev => ({ ...prev, vulnName: null }));
    }

    console.log('Updated formData vulnName to:', vulnName);
  };

  // ✅ Restore AI content function
  const restoreAIContent = () => {
    if (hasAIGeneratedContent && aiGeneratedData) {
      setFormData(prev => ({
        ...prev,
        ...aiGeneratedData,
        appendName: prev.appendName,
        accrosTheApp: prev.accrosTheApp,
        review: prev.review,
        vulnId: prev.vulnId
      }));
      toast.success('AI-generated content restored!');
    }
  };

  const handleChange = useCallback((e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  }, [errors]);

  const handleEditorChange = useCallback((field, data) => {
    setFormData(prev => ({ ...prev, [field]: data }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  }, [errors]);

  const handleFileChange = (e) => {
    setSelectedFiles(Array.from(e.target.files));
  };

  // Handle individual image addition with caption
  const handleImageAdd = async (imageData) => {
    const maxImages = 10;
    if (imagesWithCaptions.length >= maxImages) {
      throw new Error(`Maximum ${maxImages} images allowed.`);
    }

    setImagesWithCaptions(prev => [...prev, imageData]);
  };

  const handleImageRemove = (index) => {
    setImagesWithCaptions(prev => prev.filter((_, i) => i !== index));
  };

  const handleImageCaptionEdit = (index, newCaption) => {
    setImagesWithCaptions(prev =>
      prev.map((img, i) =>
        i === index ? { ...img, caption: newCaption } : img
      )
    );
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.vulnName.trim()) {
      newErrors.vulnName = 'Vulnerability name is required';
    }
    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }
    if (!formData.impact.trim()) {
      newErrors.impact = 'Impact description is required';
    }
    if (!formData.recommendation.trim()) {
      newErrors.recommendation = 'Recommendation is required';
    }
    if (!formData.owaspFamily.trim()) {
      newErrors.owaspFamily = 'OWASP Family is required';
    }
    if (!formData.cwe.trim()) {
      newErrors.cwe = 'CWE is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      toast.error('Please fix the errors below');
      return;
    }

    setIsSaving(true);
    const submissionData = new FormData();

    const submitFormData = {
      ...formData,
      projectId,
      project_name: project?.project_name || 'unknown_project',
      user_name: user.name || user.email || 'Unknown User'
    };

    if (isManualEntry || !formData.vulnId) {
      submitFormData.vulnId = formData.vulnId || null;
    }

    // Debug: Log the form data being sent
    console.log('Submitting form data:', submitFormData);
    console.log('Project name:', submitFormData.project_name);
    console.log('Vulnerability name:', submitFormData.vulnName);

    Object.keys(submitFormData).forEach(key => {
      if (submitFormData[key] !== null && submitFormData[key] !== undefined) {
        submissionData.append(key, submitFormData[key]);
      }
    });

    if (imagesWithCaptions.length > 0) {
      const uploads = imagesWithCaptions.map((img, index) => ({
        caption: img.caption,
        fileName: img.file.name,
        fileSize: img.file.size
      }));

      submissionData.append('uploadsData', JSON.stringify(uploads));

      imagesWithCaptions.forEach((img, index) => {
        submissionData.append(`uploads`, img.file);
      });
    }

    selectedFiles.forEach((file) => submissionData.append('uploads', file));

    try {
      await addProjectVulnerability(projectId, submissionData);

      const imageCount = imagesWithCaptions.length;
      const fileCount = selectedFiles.length;
      let successMessage = "Vulnerability added successfully!";

      if (imageCount > 0 || fileCount > 0) {
        successMessage += ` with ${imageCount} image(s) and ${fileCount} file(s) uploaded.`;
      }

      toast.success(successMessage);
      onVulnerabilityAdded();
      onClose();
    } catch (error) {
      console.error('Error adding vulnerability:', error);
      toast.error(error.message || 'Failed to add vulnerability');
    } finally {
      setIsSaving(false);
    }
  };

  const handleCancel = () => {
    setFormData(initialFormState);
    setSelectedFiles([]);
    setImagesWithCaptions([]);
    setIsManualEntry(false);
    setErrors({});
    setAiExplanation('');
    setShowAIHelper(true);
    setHasAIGeneratedContent(false);
    setAiGeneratedData(null);
    onClose();
  };

  const FormCheckbox = ({ label, checked, onChange, description, name }) => (
    <div className="flex items-start space-x-4 p-4 bg-muted/30 rounded-lg border border-border hover:bg-muted/50 transition-colors">
      <button
        type="button"
        onClick={() => onChange({ target: { name, type: 'checkbox', checked: !checked } })}
        className="mt-1 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded"
      >
        <CheckboxIcon checked={checked} />
      </button>
      <div className="flex-1">
        <label
          onClick={() => onChange({ target: { name, type: 'checkbox', checked: !checked } })}
          className="text-sm font-semibold text-card-foreground cursor-pointer block"
        >
          {label}
        </label>
        {description && (
          <p className="text-sm text-muted-foreground mt-2 leading-relaxed">{description}</p>
        )}
      </div>
    </div>
  );

  // ✅ FIXED: Enhanced vulnerability options with comprehensive debugging
  const vulnOptions = useMemo(() => {
    console.log('Creating vulnOptions from predefinedVulns:', predefinedVulns);

    if (!Array.isArray(predefinedVulns) || predefinedVulns.length === 0) {
      console.log('No predefined vulnerabilities available');
      return [];
    }

    const options = predefinedVulns
      .filter(v => {
        const hasName = v && (v.vulnName || v.name || v.title);
        if (!hasName) {
          console.log('Filtering out vulnerability without name:', v);
        }
        return hasName;
      })
      .map(v => {
        const name = v.vulnName || v.name || v.title;
        return {
          value: name,
          label: name,
          subtitle: v.owaspFamily ? `OWASP: ${v.owaspFamily}` : undefined
        };
      });

    console.log('Created vulnerability options:', options);
    return options;
  }, [predefinedVulns]);

  const tabs = [
    { id: 'basic', label: 'Basic Info', icon: BugIcon },
    { id: 'technical', label: 'Technical Details', icon: ScopeIcon },
    { id: 'classification', label: 'Classification', icon: ShieldIcon },
  ];

  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} maxWidth="7xl" showCloseButton={false}>
      <div className={`${theme} theme-${color} flex flex-col h-full max-h-[calc(100vh-4rem)]`}>
        {/* Fixed Header */}
        <div className="flex items-center justify-between p-6 border-b border-border bg-gradient-to-r from-red-50/50 to-orange-50/50 dark:from-red-900/10 dark:to-orange-900/10 flex-shrink-0">
          <div className="flex items-center gap-4">
            <div className="p-3 bg-red-100 dark:bg-red-900/20 rounded-xl">
              <BugIcon className="text-red-600 w-6 h-6" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-card-foreground">
                Add New Vulnerability
              </h2>
              <p className="text-muted-foreground mt-1">
                Report a new security vulnerability instance with AI assistance
              </p>
              {hasAIGeneratedContent && (
                <div className="flex items-center gap-2 mt-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-xs text-green-600 font-medium">AI Content Generated</span>
                </div>
              )}
            </div>
          </div>

          <button
            onClick={onClose}
            className="p-2 text-muted-foreground hover:text-foreground transition-colors rounded-lg hover:bg-accent"
            disabled={isSaving}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* AI Helper Section */}
        {showAIHelper && (
          <div className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/10 dark:to-indigo-900/10 border-b border-border flex-shrink-0">
            <div className="flex items-start gap-4">
              <div className="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
                <MagicWandIcon className="text-blue-600 w-5 h-5" />
              </div>
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-card-foreground mb-2">
                  AI-Powered Vulnerability Assistant
                </h3>
                <p className="text-sm text-muted-foreground mb-4">
                  Describe the vulnerability you found in natural language, and our AI will automatically populate the form fields with properly formatted technical details including bullet points, bold text, impact assessment, and recommendations.
                  <span className="font-medium text-blue-600"> Your AI-generated content will be preserved when selecting from the dropdown!</span>
                </p>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-card-foreground mb-2">
                      Describe the vulnerability:
                    </label>
                    <textarea
                      value={aiExplanation}
                      onChange={(e) => setAiExplanation(e.target.value)}
                      placeholder="E.g., 'I found a SQL injection vulnerability in the login form. When I entered a single quote in the username field, the application threw a database error revealing the SQL query structure. I was able to extract user passwords using UNION SELECT statements...'"
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent resize-none"
                      rows={4}
                      disabled={isGeneratingAI}
                    />
                  </div>

                  <div className="flex items-center gap-3">
                    <button
                      type="button"
                      onClick={handleAIGeneration}
                      disabled={isGeneratingAI || !aiExplanation.trim()}
                      className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                    >
                      {isGeneratingAI ? (
                        <>
                          <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                          Generating with formatting...
                        </>
                      ) : (
                        <>
                          <MagicWandIcon />
                          Generate Form Fields
                        </>
                      )}
                    </button>

                    <button
                      type="button"
                      onClick={() => setShowAIHelper(false)}
                      className="px-4 py-2 text-muted-foreground hover:text-foreground transition-colors"
                    >
                      Fill manually instead
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* AI Content Management Bar */}
        {hasAIGeneratedContent && !showAIHelper && (
          <div className="p-4 bg-green-50 dark:bg-green-900/10 border-b border-green-200 dark:border-green-800 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span className="text-sm font-medium text-green-700 dark:text-green-300">
                  AI-generated content is active and will be preserved when selecting vulnerabilities
                </span>
              </div>
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={restoreAIContent}
                  className="flex items-center gap-2 px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                  title="Restore AI content if overwritten"
                >
                  <RefreshIcon />
                  Restore AI Content
                </button>
                <button
                  type="button"
                  onClick={() => setShowAIHelper(true)}
                  className="px-3 py-1 text-xs text-green-600 hover:text-green-700 transition-colors"
                >
                  Show AI Helper
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Fixed Tab Navigation */}
        <div className="border-b border-border bg-muted/20 flex-shrink-0">
          <div className="flex overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                type="button"
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-3 px-6 py-4 text-sm font-semibold transition-colors whitespace-nowrap ${activeTab === tab.id
                  ? 'text-primary border-b-2 border-primary bg-background'
                  : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                  }`}
              >
                <tab.icon />
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        <form onSubmit={handleSubmit} className="flex flex-col flex-1 min-h-0">
          {/* Scrollable Content */}
          <div className="flex-1 overflow-y-auto p-6">
            {activeTab === 'basic' && (
              <div className="space-y-6">
                {/* Vulnerability Selection */}
                <div className="flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
                  <div className="flex items-center gap-3">
                    <ToggleIcon className="text-blue-600" />
                    <div>
                      <p className="font-semibold text-blue-900 dark:text-blue-100">Entry Mode</p>
                      <p className="text-sm text-blue-700 dark:text-blue-200">
                        {isManualEntry ? 'Manual entry mode' : 'Select from predefined vulnerabilities'}
                      </p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={() => setIsManualEntry(!isManualEntry)}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                  >
                    {isManualEntry ? 'Use Predefined' : 'Manual Entry'}
                  </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* ✅ FIXED: Vulnerability Name with native select dropdown */}
                  <div className="lg:col-span-2">
                    {isManualEntry ? (
                      <FormInput
                        label="Vulnerability Name"
                        name="vulnName"
                        value={formData.vulnName}
                        onChange={handleChange}
                        placeholder="Enter vulnerability name"
                        required
                        error={errors.vulnName}
                        description="Enter a descriptive name for this vulnerability"
                      />
                    ) : (
                      <div className="space-y-3">
                        {/* <label className="block text-sm font-semibold text-card-foreground">
                          Vulnerability Name
                          <span className="text-red-500 ml-1">*</span>
                          {hasAIGeneratedContent && (
                            <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
                              AI Content Protected
                            </span>
                          )}
                        </label> */}

                        {/* Debug info */}
                        {/* <div className="text-xs text-muted-foreground mb-2">
                          Debug: Options available: {vulnOptions.length} | Current value: {formData.vulnName || 'None'}
                        </div> */}

                        {/* ✅ FIXED: Native select dropdown that actually works */}
                        {/* <select
                          value={formData.vulnName}
                          onChange={(e) => {
                            const selectedValue = e.target.value;
                            console.log('Dropdown selection:', selectedValue);
                            handleVulnerabilitySelect(selectedValue);
                          }}
                          className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                        >
                          <option value="">Select a vulnerability...</option>
                          {vulnOptions.map((option, index) => (
                            <option key={index} value={option.value}>
                              {option.label}
                              {option.subtitle ? ` - ${option.subtitle}` : ''}
                            </option>
                          ))}
                        </select> */}
                        {/* ✅ FIXED: Vulnerability Name with SearchableDropdown restored */}
                        <div className="lg:col-span-2">
                          {isManualEntry ? (
                            <FormInput
                              label="Vulnerability Name"
                              name="vulnName"
                              value={formData.vulnName}
                              onChange={handleChange}
                              placeholder="Enter vulnerability name"
                              required
                              error={errors.vulnName}
                              description="Enter a descriptive name for this vulnerability"
                            />
                          ) : (
                            <div className="space-y-3">
                              <label className="block text-sm font-semibold text-card-foreground">
                                Vulnerability Name
                                <span className="text-red-500 ml-1">*</span>
                                {hasAIGeneratedContent && (
                                  <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded">
                                    AI Content Protected
                                  </span>
                                )}
                              </label>

                              {/* Debug info */}
                              <div className="text-xs text-muted-foreground mb-2">
                                Debug: {vulnOptions.length} searchable vulnerabilities available | Current: {formData.vulnName || 'None'}
                              </div>

                              {/* ✅ FIXED: Using SearchableDropdown for 10k+ options */}
                              <SearchableDropdown
                                options={vulnOptions}
                                value={formData.vulnName}
                                onChange={handleVulnerabilitySelect}
                                placeholder="Search and select a vulnerability..."
                                error={errors.vulnName}
                                noOptionsMessage="No vulnerabilities found matching your search"
                              />

                              {errors.vulnName && <p className="text-red-500 text-sm">{errors.vulnName}</p>}
                              <p className="text-muted-foreground text-sm">
                                Search from our vulnerability database ({vulnOptions.length} searchable vulnerabilities)
                                {hasAIGeneratedContent && (
                                  <span className="block text-green-600 font-medium mt-1">
                                    ✓ Your AI-generated content will be preserved when selecting from dropdown
                                  </span>
                                )}
                              </p>
                            </div>
                          )}
                        </div>
                        {/* {errors.vulnName && <p className="text-red-500 text-sm">{errors.vulnName}</p>}
                        <p className="text-muted-foreground text-sm">
                          Search from our vulnerability database ({vulnOptions.length} available)
                          {hasAIGeneratedContent && (
                            <span className="block text-green-600 font-medium mt-1">
                              ✓ Your AI-generated content will be preserved when selecting from dropdown
                            </span>
                          )}
                        </p> */}
                      </div>
                    )}
                  </div>

                  {/* Append Name Field */}
                  <FormInput
                    label="Append Name"
                    name="appendName"
                    value={formData.appendName}
                    onChange={handleChange}
                    placeholder="Additional identifier or name to append"
                    description="Optional: Add extra information to append to the vulnerability name"
                  />

                  {/* Severity */}
                  <div className="space-y-3">
                    <label className="block text-sm font-semibold text-card-foreground">
                      Severity <span className="text-red-500 ml-1">*</span>
                    </label>
                    <select
                      name="severity"
                      value={formData.severity}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                    >
                      {severityOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Review Status */}
                  <div className="space-y-3">
                    <label className="block text-sm font-semibold text-card-foreground">
                      Review Status
                    </label>
                    <select
                      name="review"
                      value={formData.review}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-input rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                    >
                      {reviewOptions.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.label}
                        </option>
                      ))}
                    </select>
                    <p className="text-muted-foreground text-sm">Current status of this vulnerability</p>
                  </div>
                </div>

                {/* Enhanced Description with AI indicator */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Description
                    <span className="text-red-500 ml-1">*</span>
                    {hasAIGeneratedContent && formData.description === aiGeneratedData?.description && (
                      <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                        AI Generated
                      </span>
                    )}
                  </label>
                  <RichTextEditor
                    value={formData.description}
                    onChange={(data) => handleEditorChange('description', data)}
                    placeholder="Provide a detailed description with bullet points and formatting..."
                    height={200}
                    toolbar={[
                      'heading', '|',
                      'bold', 'italic', 'underline', '|',
                      'bulletedList', 'numberedList', '|',
                      'outdent', 'indent', '|',
                      'link', 'blockQuote', 'code', '|',
                      'undo', 'redo'
                    ]}
                  />
                  {errors.description && <p className="text-red-500 text-sm mt-2">{errors.description}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Describe how this vulnerability was discovered and its technical details</p>
                </div>

                {/* Enhanced Impact with AI indicator */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Impact
                    <span className="text-red-500 ml-1">*</span>
                    {hasAIGeneratedContent && formData.impact === aiGeneratedData?.impact && (
                      <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                        AI Generated
                      </span>
                    )}
                  </label>
                  <RichTextEditor
                    value={formData.impact}
                    onChange={(data) => handleEditorChange('impact', data)}
                    placeholder="Describe the potential impact with bullet points..."
                    height={200}
                    toolbar={[
                      'heading', '|',
                      'bold', 'italic', 'underline', '|',
                      'bulletedList', 'numberedList', '|',
                      'outdent', 'indent', '|',
                      'link', 'blockQuote', 'code', '|',
                      'undo', 'redo'
                    ]}
                  />
                  {errors.impact && <p className="text-red-500 text-sm mt-2">{errors.impact}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Explain what could happen if this vulnerability is exploited</p>
                </div>

                {/* Enhanced Recommendation with AI indicator */}
                <div>
                  <label className="block text-sm font-semibold text-card-foreground mb-3">
                    Recommendation
                    <span className="text-red-500 ml-1">*</span>
                    {hasAIGeneratedContent && formData.recommendation === aiGeneratedData?.recommendation && (
                      <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">
                        AI Generated
                      </span>
                    )}
                  </label>
                  <RichTextEditor
                    value={formData.recommendation}
                    onChange={(data) => handleEditorChange('recommendation', data)}
                    placeholder="Provide step-by-step recommendations..."
                    height={200}
                    toolbar={[
                      'heading', '|',
                      'bold', 'italic', 'underline', '|',
                      'bulletedList', 'numberedList', '|',
                      'outdent', 'indent', '|',
                      'link', 'blockQuote', 'code', '|',
                      'undo', 'redo'
                    ]}
                  />
                  {errors.recommendation && <p className="text-red-500 text-sm mt-2">{errors.recommendation}</p>}
                  <p className="text-muted-foreground text-sm mt-2">Provide clear steps to remediate this vulnerability</p>
                </div>
              </div>
            )}

            {activeTab === 'technical' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <FormInput
                    label="Affected URL"
                    name="affectedUrl"
                    value={formData.affectedUrl}
                    onChange={handleChange}
                    placeholder="https://example.com/vulnerable-page"
                    type="url"
                    description="The specific URL where this vulnerability was found"
                  />

                  <FormInput
                    label="Affected Parameter"
                    name="affectedParameter"
                    value={formData.affectedParameter}
                    onChange={handleChange}
                    placeholder="e.g., username, id, search"
                    description="The parameter that is vulnerable"
                  />
                </div>

                <FormInput
                  label="Attack Value/Payload"
                  name="attackValue"
                  value={formData.attackValue}
                  onChange={handleChange}
                  placeholder="Enter the attack payload or value used..."
                  type="textarea"
                  description="The actual payload or value used to exploit this vulnerability"
                />

                <FormCheckbox
                  label="Affects Entire Application"
                  name="accrosTheApp"
                  checked={formData.accrosTheApp}
                  onChange={handleChange}
                  description="Check this if the vulnerability affects the entire application, not just a specific page or component"
                />

                {/* ✅ Individual Image Upload with Captions */}
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-card-foreground mb-4">
                      Proof of Concept Images
                    </h3>
                    <p className="text-sm text-muted-foreground mb-4">
                      Upload evidence images one by one with individual captions. Each image must have a caption describing what it shows.
                    </p>

                    <IndividualImageUpload
                      onImageAdd={handleImageAdd}
                      maxImages={10}
                      currentCount={imagesWithCaptions.length}
                    />

                    <ImageList
                      images={imagesWithCaptions}
                      onRemove={handleImageRemove}
                      onEditCaption={handleImageCaptionEdit}
                    />
                  </div>
                </div>

                {/* File Upload */}
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-card-foreground">
                    Additional Evidence Files
                  </label>
                  <div className="border-2 border-dashed border-input rounded-lg p-6 text-center hover:border-primary/50 transition-colors">
                    <UploadIcon className="w-8 h-8 text-muted-foreground mx-auto mb-2" />
                    <p className="text-sm text-muted-foreground mb-2">
                      Drag and drop files here, or click to select
                    </p>
                    <input
                      type="file"
                      multiple
                      onChange={handleFileChange}
                      className="hidden"
                      id="file-upload"
                      accept=".pdf,.doc,.docx,.txt"
                    />
                    <label
                      htmlFor="file-upload"
                      className="inline-flex items-center gap-2 px-4 py-2 bg-secondary text-secondary-foreground rounded-lg cursor-pointer hover:bg-secondary/90 transition-colors text-sm font-medium"
                    >
                      <UploadIcon />
                      Choose Files
                    </label>
                  </div>
                  {selectedFiles.length > 0 && (
                    <div className="space-y-2">
                      <p className="text-sm font-medium text-card-foreground">Selected Files:</p>
                      {selectedFiles.map((file, index) => (
                        <div key={index} className="flex items-center gap-2 text-sm text-muted-foreground">
                          <span>• {file.name}</span>
                          <span className="text-xs">({(file.size / 1024).toFixed(1)} KB)</span>
                        </div>
                      ))}
                    </div>
                  )}
                  <p className="text-muted-foreground text-sm">Upload documents, proof-of-concept files, or other evidence (PDF, DOC, TXT)</p>
                </div>
              </div>
            )}

            {activeTab === 'classification' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <FormInput
                    label="OWASP Family"
                    name="owaspFamily"
                    value={formData.owaspFamily}
                    onChange={handleChange}
                    placeholder="e.g., A03-2021-Injection"
                    required
                    error={errors.owaspFamily}
                    description="OWASP Top 10 category this vulnerability falls under"
                  />

                  <FormInput
                    label="CWE ID"
                    name="cwe"
                    value={formData.cwe}
                    onChange={handleChange}
                    placeholder="e.g., CWE-79, CWE-89"
                    required
                    error={errors.cwe}
                    description="Common Weakness Enumeration identifier"
                  />
                </div>

                {/* Current Severity Display */}
                <div className="p-4 bg-muted/30 rounded-lg border border-border">
                  <h4 className="text-sm font-semibold text-card-foreground mb-2">Current Classification</h4>
                  <div className="flex items-center gap-4">
                    <div className={`inline-flex items-center px-3 py-2 rounded-lg text-sm font-semibold border ${getSeverityColor(formData.severity)}`}>
                      <AlertTriangleIcon className="w-4 h-4 mr-2" />
                      {formData.severity}
                    </div>
                    {formData.owaspFamily && (
                      <div className="text-sm text-muted-foreground">
                        OWASP: {formData.owaspFamily}
                      </div>
                    )}
                    {formData.cwe && (
                      <div className="text-sm text-muted-foreground">
                        {formData.cwe}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Fixed Footer */}
          <div className="flex justify-end gap-4 p-6 border-t border-border bg-muted/10 flex-shrink-0">
            <button
              type="button"
              onClick={handleCancel}
              disabled={isSaving}
              className="px-6 py-3 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-lg font-semibold transition-all duration-200 disabled:opacity-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSaving}
              className="px-6 py-3 bg-primary text-primary-foreground hover:bg-primary/90 rounded-lg font-semibold transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-3 min-w-[160px] justify-center"
            >
              {isSaving ? (
                <>
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                  Adding...
                </>
              ) : (
                <>
                  <SaveIcon />
                  Add Vulnerability
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </Modal>
  );
};

export default AddVulnerabilityModal;
